{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ramos\\\\Downloads\\\\project\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport GameSelector from './components/GameSelector';\nimport GameRecommendation from './components/GameRecommendation';\nimport PlayerCounter from './components/PlayerCounter';\nimport PirateHeader from './components/PirateHeader';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Ahora, manejaremos los estados de jugadores por separado,\n  // y PlayerCounter los actualizará directamente.\n  const [adultPlayers, setAdultPlayers] = useState(0);\n  const [childPlayers, setChildPlayers] = useState(0);\n  const [selectedGameType, setSelectedGameType] = useState(null);\n\n  // Estado para las dificultades permitidas\n  const [allowedDifficulties, setAllowedDifficulties] = useState([]);\n\n  // useEffect para recalcular las dificultades permitidas cuando cambian los jugadores\n  useEffect(() => {\n    let difficulties = [];\n    // La lógica de la dificultad debe depender directamente de adultPlayers y childPlayers\n    if (childPlayers > 0) {\n      // Si hay al menos un niño, la dificultad es fácil y media\n      difficulties = ['facil', 'medio'];\n    } else if (adultPlayers > 0) {\n      // Si solo hay adultos (y al least uno), la dificultad es media y difícil\n      difficulties = ['medio', 'dificil'];\n    }\n    // Si ambos son 0, difficulties será [], lo cual es correcto.\n\n    setAllowedDifficulties(difficulties);\n    // Mostrar en consola la dificultad permitida\n    console.log(\"Dificultades permitidas en App.js:\", difficulties);\n  }, [adultPlayers, childPlayers]); // Dependencias: se ejecuta cuando estos estados cambian\n\n  // Esta función ahora será pasada directamente a PlayerCounter\n  const handlePlayersChange = (adults, children) => {\n    setAdultPlayers(adults);\n    setChildPlayers(children);\n  };\n  const handleSelectGameType = gameType => {\n    setSelectedGameType(gameType);\n  };\n\n  // Función para volver a la selección de juegos\n  const handleBackToSelection = () => {\n    setSelectedGameType(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-blue-100 p-4\",\n    children: [/*#__PURE__*/_jsxDEV(PirateHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-md mx-auto mt-8\",\n      children: !selectedGameType ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(PlayerCounter, {\n          onPlayersChange: handlePlayersChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(GameSelector, {\n          onSelectGameType: handleSelectGameType\n          // Si necesitas un botón de \"atrás\" en GameSelector, se lo pasarías aquí\n          // Por ahora, asumiremos que GameSelector es el siguiente paso después de PlayerCounter\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) :\n      /*#__PURE__*/\n      // Cuando selectedGameType tiene un valor, mostramos GameRecommendation\n      _jsxDEV(GameRecommendation, {\n        gameType: selectedGameType\n        // Pasamos los jugadores como un objeto para mantener la estructura anterior si es necesario\n        ,\n        players: {\n          adultPlayers,\n          childPlayers\n        },\n        allowedDifficulties: allowedDifficulties,\n        onBack: handleBackToSelection // Función para volver a la selección de juegos\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"08kq/Jfd+XhK4rvaJY/WGTGFXBg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","GameSelector","GameRecommendation","PlayerCounter","PirateHeader","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","adultPlayers","setAdultPlayers","childPlayers","setChildPlayers","selectedGameType","setSelectedGameType","allowedDifficulties","setAllowedDifficulties","difficulties","console","log","handlePlayersChange","adults","children","handleSelectGameType","gameType","handleBackToSelection","className","fileName","_jsxFileName","lineNumber","columnNumber","onPlayersChange","onSelectGameType","players","onBack","_c","$RefreshReg$"],"sources":["C:/Users/ramos/Downloads/project/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport GameSelector from './components/GameSelector';\nimport GameRecommendation from './components/GameRecommendation';\nimport PlayerCounter from './components/PlayerCounter';\nimport PirateHeader from './components/PirateHeader';\nimport './styles.css';\n\nfunction App() {\n  // Ahora, manejaremos los estados de jugadores por separado,\n  // y PlayerCounter los actualizará directamente.\n  const [adultPlayers, setAdultPlayers] = useState(0);\n  const [childPlayers, setChildPlayers] = useState(0);\n\n  const [selectedGameType, setSelectedGameType] = useState(null);\n\n  // Estado para las dificultades permitidas\n  const [allowedDifficulties, setAllowedDifficulties] = useState([]);\n\n  // useEffect para recalcular las dificultades permitidas cuando cambian los jugadores\n  useEffect(() => {\n    let difficulties = [];\n    // La lógica de la dificultad debe depender directamente de adultPlayers y childPlayers\n    if (childPlayers > 0) {\n      // Si hay al menos un niño, la dificultad es fácil y media\n      difficulties = ['facil', 'medio'];\n    } else if (adultPlayers > 0) {\n      // Si solo hay adultos (y al least uno), la dificultad es media y difícil\n      difficulties = ['medio', 'dificil'];\n    }\n    // Si ambos son 0, difficulties será [], lo cual es correcto.\n\n    setAllowedDifficulties(difficulties);\n    // Mostrar en consola la dificultad permitida\n    console.log(\"Dificultades permitidas en App.js:\", difficulties);\n  }, [adultPlayers, childPlayers]); // Dependencias: se ejecuta cuando estos estados cambian\n\n  // Esta función ahora será pasada directamente a PlayerCounter\n  const handlePlayersChange = (adults, children) => {\n    setAdultPlayers(adults);\n    setChildPlayers(children);\n  };\n\n  const handleSelectGameType = (gameType) => {\n    setSelectedGameType(gameType);\n  };\n\n  // Función para volver a la selección de juegos\n  const handleBackToSelection = () => {\n    setSelectedGameType(null);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-blue-100 p-4\">\n      <PirateHeader />\n      <div className=\"max-w-md mx-auto mt-8\">\n        {/* Aquí la lógica condicional necesita ajustarse a cómo se manejan ahora los estados */}\n        {/* Si selectedGameType es null, mostramos PlayerCounter y GameSelector */}\n        {!selectedGameType ? (\n          <>\n            {/* PlayerCounter ahora necesita la prop para actualizar adultos y niños */}\n            <PlayerCounter onPlayersChange={handlePlayersChange} />\n            {/* GameSelector se muestra una vez que los jugadores son contados,\n                asumiendo que 'Embarcar' en PlayerCounter lleva a la selección de juego */}\n            <GameSelector\n              onSelectGameType={handleSelectGameType}\n              // Si necesitas un botón de \"atrás\" en GameSelector, se lo pasarías aquí\n              // Por ahora, asumiremos que GameSelector es el siguiente paso después de PlayerCounter\n            />\n          </>\n        ) : (\n          // Cuando selectedGameType tiene un valor, mostramos GameRecommendation\n          <GameRecommendation\n            gameType={selectedGameType}\n            // Pasamos los jugadores como un objeto para mantener la estructura anterior si es necesario\n            players={{ adultPlayers, childPlayers }}\n            allowedDifficulties={allowedDifficulties}\n            onBack={handleBackToSelection} // Función para volver a la selección de juegos\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}