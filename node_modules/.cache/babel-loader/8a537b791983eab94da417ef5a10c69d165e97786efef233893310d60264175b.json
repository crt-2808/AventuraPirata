{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ramos\\\\Downloads\\\\project\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport GameSelector from './components/GameSelector';\nimport GameRecommendation from './components/GameRecommendation';\nimport PlayerCounter from './components/PlayerCounter';\nimport PirateHeader from './components/PirateHeader';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Estado para el objeto de jugadores (manteniendo tu estructura original de return)\n  // Contendrá { adultPlayers: N, childPlayers: M } cuando PlayerCounter lo establezca.\n  const [players, setPlayers] = useState(null);\n  const [gameType, setGameType] = useState(null);\n\n  // Nuevo estado para las dificultades permitidas\n  const [allowedDifficulties, setAllowedDifficulties] = useState([]);\n\n  // useEffect para recalcular las dificultades permitidas cuando cambian los jugadores\n  useEffect(() => {\n    let difficulties = [];\n    if (players) {\n      // Solo si el objeto 'players' ya ha sido establecido (no es null)\n      const {\n        adultPlayers,\n        childPlayers\n      } = players; // Desestructuramos para acceder a los números\n\n      if (childPlayers > 0) {\n        // Si hay al menos un niño, la dificultad es fácil y media\n        difficulties = ['facil', 'medio'];\n      } else if (adultPlayers > 0) {\n        // Si solo hay adultos (y al menos uno), la dificultad es media y difícil\n        difficulties = ['medio', 'dificil'];\n      }\n      // Si players existe pero ambos son 0, 'difficulties' seguirá siendo un array vacío.\n    }\n    setAllowedDifficulties(difficulties);\n    // Mostrar en consola la dificultad permitida\n    console.log(\"Dificultades permitidas en App.js:\", difficulties);\n  }, [players]); // Dependencia: se ejecuta cuando el objeto 'players' completo cambie\n\n  // Función para manejar el \"volver\" desde GameSelector al PlayerCounter\n  // (Esta función fue añadida en una iteración anterior para asegurar el reseteo completo)\n  const handleBackToPlayers = () => {\n    setGameType(null); // Resetea el gameType para volver a la selección de juego O jugadores\n    setPlayers(null); // Resetea players para volver a la pantalla de PlayerCounter\n  };\n  return (\n    /*#__PURE__*/\n    // ¡ESTA PARTE DEL CÓDIGO PERMANECE EXACTAMENTE IGUAL A TU ORIGINAL!\n    _jsxDEV(\"div\", {\n      className: \"min-h-screen bg-blue-100 p-4\",\n      children: [/*#__PURE__*/_jsxDEV(PirateHeader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"max-w-md mx-auto mt-8\",\n        children: !players ?\n        /*#__PURE__*/\n        // Si 'players' es null, muestra el contador de jugadores\n        _jsxDEV(PlayerCounter, {\n          onPlayersSelected: setPlayers\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this) : !gameType ?\n        /*#__PURE__*/\n        // Si 'players' ya está establecido, pero 'gameType' es null, muestra el selector de juego\n        _jsxDEV(GameSelector, {\n          onGameSelected: setGameType,\n          onBack: handleBackToPlayers // Pasa la función para volver al contador de jugadores\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this) :\n        /*#__PURE__*/\n        // Si 'players' y 'gameType' están establecidos, muestra la recomendación de juego\n        _jsxDEV(GameRecommendation, {\n          gameType: gameType,\n          players: players // Pasa el objeto completo de jugadores\n          ,\n          allowedDifficulties: allowedDifficulties // PASANDO LA NUEVA PROP DE DIFICULTADES\n          ,\n          onBack: () => setGameType(null) // Función para volver a la selección de juego\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s(App, \"75dkbvg1HiEHHq/DtjnzroyV08Y=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","GameSelector","GameRecommendation","PlayerCounter","PirateHeader","jsxDEV","_jsxDEV","App","_s","players","setPlayers","gameType","setGameType","allowedDifficulties","setAllowedDifficulties","difficulties","adultPlayers","childPlayers","console","log","handleBackToPlayers","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onPlayersSelected","onGameSelected","onBack","_c","$RefreshReg$"],"sources":["C:/Users/ramos/Downloads/project/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport GameSelector from './components/GameSelector';\nimport GameRecommendation from './components/GameRecommendation';\nimport PlayerCounter from './components/PlayerCounter';\nimport PirateHeader from './components/PirateHeader';\nimport './styles.css';\n\nfunction App() {\n  // Estado para el objeto de jugadores (manteniendo tu estructura original de return)\n  // Contendrá { adultPlayers: N, childPlayers: M } cuando PlayerCounter lo establezca.\n  const [players, setPlayers] = useState(null); \n  const [gameType, setGameType] = useState(null);\n\n  // Nuevo estado para las dificultades permitidas\n  const [allowedDifficulties, setAllowedDifficulties] = useState([]);\n\n  // useEffect para recalcular las dificultades permitidas cuando cambian los jugadores\n  useEffect(() => {\n    let difficulties = [];\n    if (players) { // Solo si el objeto 'players' ya ha sido establecido (no es null)\n      const { adultPlayers, childPlayers } = players; // Desestructuramos para acceder a los números\n\n      if (childPlayers > 0) {\n        // Si hay al menos un niño, la dificultad es fácil y media\n        difficulties = ['facil', 'medio'];\n      } else if (adultPlayers > 0) {\n        // Si solo hay adultos (y al menos uno), la dificultad es media y difícil\n        difficulties = ['medio', 'dificil'];\n      }\n      // Si players existe pero ambos son 0, 'difficulties' seguirá siendo un array vacío.\n    }\n    setAllowedDifficulties(difficulties);\n    // Mostrar en consola la dificultad permitida\n    console.log(\"Dificultades permitidas en App.js:\", difficulties);\n  }, [players]); // Dependencia: se ejecuta cuando el objeto 'players' completo cambie\n\n  // Función para manejar el \"volver\" desde GameSelector al PlayerCounter\n  // (Esta función fue añadida en una iteración anterior para asegurar el reseteo completo)\n  const handleBackToPlayers = () => {\n    setGameType(null); // Resetea el gameType para volver a la selección de juego O jugadores\n    setPlayers(null); // Resetea players para volver a la pantalla de PlayerCounter\n  };\n\n  return (\n    // ¡ESTA PARTE DEL CÓDIGO PERMANECE EXACTAMENTE IGUAL A TU ORIGINAL!\n    <div className=\"min-h-screen bg-blue-100 p-4\">\n      <PirateHeader />\n      <div className=\"max-w-md mx-auto mt-8\">\n        {!players ? (\n          // Si 'players' es null, muestra el contador de jugadores\n          <PlayerCounter onPlayersSelected={setPlayers} />\n        ) : !gameType ? (\n          // Si 'players' ya está establecido, pero 'gameType' es null, muestra el selector de juego\n          <GameSelector \n            onGameSelected={setGameType} \n            onBack={handleBackToPlayers} // Pasa la función para volver al contador de jugadores\n          />\n        ) : (\n          // Si 'players' y 'gameType' están establecidos, muestra la recomendación de juego\n          <GameRecommendation \n            gameType={gameType} \n            players={players} // Pasa el objeto completo de jugadores\n            allowedDifficulties={allowedDifficulties} // PASANDO LA NUEVA PROP DE DIFICULTADES\n            onBack={() => setGameType(null)} // Función para volver a la selección de juego\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}