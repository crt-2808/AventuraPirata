{"ast":null,"code":"var _jsxFileName = \"D:\\\\Proyectos Code\\\\project\\\\src\\\\components\\\\JengaGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction JengaGame({\n  players,\n  onExitGame\n}) {\n  _s();\n  // Jenga no necesita tetrisPieces ni currentPiece\n  // const [tetrisPieces, setTetrisPieces] = useState([]);\n  // const [currentPiece, setCurrentPiece] = useState(null);\n\n  const [turnTimeLeft, setTurnTimeLeft] = useState(10); // Tiempo restante en el turno actual\n  const [showChangePlayerMessage, setShowChangePlayerMessage] = useState(false);\n  const [changePlayerTimer, setChangePlayerTimer] = useState(3); // 3 segundos para cambio de jugador\n  const [isGameActive, setIsGameActive] = useState(false);\n  const [turnCounter, setTurnCounter] = useState(0); // Inicia en 0, se incrementa antes de cada turno.\n\n  const turnTimerRef = useRef(null);\n  const changePlayerTimerRef = useRef(null);\n\n  // Función para calcular el tiempo base del turno según el contador\n  // Misma lógica que en TetrisGame para la dificultad progresiva\n  const getBaseTurnDuration = useCallback(currentTurn => {\n    let baseTime = 10; // Tiempo inicial base\n    const reduction = Math.floor((currentTurn - 1) / 5); // Cada 5 turnos, reduce 1 segundo\n    return Math.max(1, baseTime - reduction); // Mínimo de 1 segundo\n  }, []);\n  const startTurnTimer = useCallback(turnNumber => {\n    clearInterval(turnTimerRef.current);\n    const duration = getBaseTurnDuration(turnNumber);\n    setTurnTimeLeft(duration);\n    setIsGameActive(true);\n    console.log(`Jenga - Turno #${turnNumber}. Duración del turno: ${duration}s`); // Para depuración\n  }, [getBaseTurnDuration]);\n\n  // Lógica para avanzar al siguiente turno\n  const handleNextTurnLogic = useCallback(() => {\n    clearInterval(turnTimerRef.current);\n    const nextTurnNumber = turnCounter + 1; // Calculamos el número del siguiente turno\n    setTurnCounter(nextTurnNumber); // Actualizamos el contador de turnos\n\n    // En Jenga, no hay una \"pieza\" que cargar, solo iniciar el siguiente turno\n    startTurnTimer(nextTurnNumber); // Inicia el temporizador para el nuevo turno\n    setIsGameActive(true);\n\n    // No hay caso de \"no hay más piezas\" en Jenga, a menos que definas un límite de turnos\n    // Si quisieras un límite, lo agregarías aquí, por ejemplo:\n    // if (nextTurnNumber > MAX_JENGA_TURNS) {\n    //    console.log(\"Juego de Jenga terminado por límite de turnos.\");\n    //    setIsGameActive(false);\n    //    if (onExitGame) {\n    //      onExitGame();\n    //    }\n    // }\n  }, [turnCounter, onExitGame, startTurnTimer]);\n\n  // useEffect para iniciar el juego de Jenga\n  useEffect(() => {\n    // En Jenga, no hay datos externos que cargar como en Tetris.\n    // Simplemente iniciamos el primer turno.\n    const initialTurnNumber = 1;\n    setTurnCounter(initialTurnNumber); // Establece el turno inicial a 1\n    startTurnTimer(initialTurnNumber); // Inicia el temporizador para el primer turno\n    setIsGameActive(true);\n    return () => {\n      clearInterval(turnTimerRef.current);\n      clearInterval(changePlayerTimerRef.current);\n    };\n  }, [startTurnTimer]);\n\n  // --- Lógica del Temporizador de Turno ---\n  useEffect(() => {\n    if (isGameActive && turnTimeLeft > 0 && !showChangePlayerMessage) {\n      turnTimerRef.current = setInterval(() => {\n        setTurnTimeLeft(prevTime => prevTime - 1);\n      }, 1000);\n    } else if (turnTimeLeft === 0 && isGameActive) {\n      clearInterval(turnTimerRef.current);\n      console.log(\"Jenga - ¡Tiempo agotado para el turno!\");\n      setIsGameActive(false);\n      setShowChangePlayerMessage(true);\n      setChangePlayerTimer(3); // Reinicia a 3 segundos para el mensaje de cambio de jugador\n    }\n    return () => clearInterval(turnTimerRef.current);\n  }, [turnTimeLeft, isGameActive, showChangePlayerMessage]);\n\n  // --- Lógica del Temporizador de Cambio de Jugador ---\n  useEffect(() => {\n    if (showChangePlayerMessage && changePlayerTimer > 0) {\n      changePlayerTimerRef.current = setInterval(() => {\n        setChangePlayerTimer(prevTime => prevTime - 1);\n      }, 1000);\n    } else if (changePlayerTimer === 0 && showChangePlayerMessage) {\n      clearInterval(changePlayerTimerRef.current);\n      setShowChangePlayerMessage(false);\n      handleNextTurnLogic(); // Avanza al siguiente turno\n    }\n    return () => clearInterval(changePlayerTimerRef.current);\n  }, [showChangePlayerMessage, changePlayerTimer, handleNextTurnLogic]);\n  const handleVale = () => {\n    clearInterval(turnTimerRef.current);\n    setIsGameActive(false); // Pausa el temporizador de turno\n    setShowChangePlayerMessage(true); // Muestra el mensaje de cambio de jugador\n    setChangePlayerTimer(3); // Inicia el temporizador de cambio de jugador\n    // handleNextTurnLogic se llamará automáticamente después de 3 segundos\n  };\n  const handleTerminar = () => {\n    clearInterval(turnTimerRef.current);\n    clearInterval(changePlayerTimerRef.current);\n    setIsGameActive(false);\n    if (onExitGame) {\n      onExitGame();\n    }\n  };\n\n  // La barra de progreso se basa en el tiempo inicial del turno\n  const currentTurnBaseDuration = getBaseTurnDuration(turnCounter > 0 ? turnCounter : 1);\n  const progressPercentage = turnTimeLeft / currentTurnBaseDuration * 100;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container bg-white p-6 rounded-lg shadow-md text-center relative\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onExitGame,\n      className: \"absolute top-4 left-4 bg-gray-200 hover:bg-gray-300 p-2 rounded-full text-xl\",\n      children: \"\\u2190\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-3xl font-bold mb-4 text-gray-800\",\n      children: \"\\xA1Jenga!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-xl text-gray-700 mb-4\",\n      children: [\"Turno #\", turnCounter]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full bg-gray-200 rounded-full h-4 dark:bg-gray-700 mb-6\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-red-500 h-4 rounded-full transition-all duration-1000 ease-linear\",\n        style: {\n          width: `${progressPercentage}%`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), showChangePlayerMessage ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"my-10\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-green-600 text-5xl font-bold mb-4\",\n        children: \"\\xA1Cambia de Jugador!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-700 text-3xl\",\n        children: [\"Siguiente turno en \", changePlayerTimer, \"s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }, this) :\n    /*#__PURE__*/\n    // Muestra el tiempo restante grande y centrado\n    _jsxDEV(\"div\", {\n      className: \"my-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-8xl font-extrabold text-red-700 leading-none\",\n        children: [turnTimeLeft, /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-4xl\",\n          children: \"s\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-2xl text-gray-600 mt-4\",\n        children: \"Tiempo para tu movimiento\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center space-x-4 mt-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleVale,\n        className: \"bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-lg text-lg transition duration-300\",\n        children: \"\\xA1Vale!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleTerminar,\n        className: \"bg-red-500 hover:bg-red-600 text-white font-bold py-3 px-6 rounded-lg text-lg transition duration-300\",\n        children: \"Terminar Juego\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n}\n_s(JengaGame, \"b0+37XZiQy2not8Vx8Q/mvfvc/4=\");\n_c = JengaGame;\nexport default JengaGame;\nvar _c;\n$RefreshReg$(_c, \"JengaGame\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","jsxDEV","_jsxDEV","JengaGame","players","onExitGame","_s","turnTimeLeft","setTurnTimeLeft","showChangePlayerMessage","setShowChangePlayerMessage","changePlayerTimer","setChangePlayerTimer","isGameActive","setIsGameActive","turnCounter","setTurnCounter","turnTimerRef","changePlayerTimerRef","getBaseTurnDuration","currentTurn","baseTime","reduction","Math","floor","max","startTurnTimer","turnNumber","clearInterval","current","duration","console","log","handleNextTurnLogic","nextTurnNumber","initialTurnNumber","setInterval","prevTime","handleVale","handleTerminar","currentTurnBaseDuration","progressPercentage","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","style","width","_c","$RefreshReg$"],"sources":["D:/Proyectos Code/project/src/components/JengaGame.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\r\n\r\nfunction JengaGame({ players, onExitGame }) {\r\n  // Jenga no necesita tetrisPieces ni currentPiece\r\n  // const [tetrisPieces, setTetrisPieces] = useState([]);\r\n  // const [currentPiece, setCurrentPiece] = useState(null);\r\n\r\n  const [turnTimeLeft, setTurnTimeLeft] = useState(10); // Tiempo restante en el turno actual\r\n  const [showChangePlayerMessage, setShowChangePlayerMessage] = useState(false);\r\n  const [changePlayerTimer, setChangePlayerTimer] = useState(3); // 3 segundos para cambio de jugador\r\n  const [isGameActive, setIsGameActive] = useState(false);\r\n  const [turnCounter, setTurnCounter] = useState(0); // Inicia en 0, se incrementa antes de cada turno.\r\n\r\n  const turnTimerRef = useRef(null);\r\n  const changePlayerTimerRef = useRef(null);\r\n\r\n  // Función para calcular el tiempo base del turno según el contador\r\n  // Misma lógica que en TetrisGame para la dificultad progresiva\r\n  const getBaseTurnDuration = useCallback((currentTurn) => {\r\n    let baseTime = 10; // Tiempo inicial base\r\n    const reduction = Math.floor((currentTurn - 1) / 5); // Cada 5 turnos, reduce 1 segundo\r\n    return Math.max(1, baseTime - reduction); // Mínimo de 1 segundo\r\n  }, []);\r\n\r\n\r\n  const startTurnTimer = useCallback((turnNumber) => {\r\n    clearInterval(turnTimerRef.current);\r\n    const duration = getBaseTurnDuration(turnNumber);\r\n    setTurnTimeLeft(duration);\r\n    setIsGameActive(true);\r\n    console.log(`Jenga - Turno #${turnNumber}. Duración del turno: ${duration}s`); // Para depuración\r\n  }, [getBaseTurnDuration]);\r\n\r\n\r\n  // Lógica para avanzar al siguiente turno\r\n  const handleNextTurnLogic = useCallback(() => {\r\n    clearInterval(turnTimerRef.current);\r\n\r\n    const nextTurnNumber = turnCounter + 1; // Calculamos el número del siguiente turno\r\n    setTurnCounter(nextTurnNumber); // Actualizamos el contador de turnos\r\n\r\n    // En Jenga, no hay una \"pieza\" que cargar, solo iniciar el siguiente turno\r\n    startTurnTimer(nextTurnNumber); // Inicia el temporizador para el nuevo turno\r\n    setIsGameActive(true);\r\n\r\n    // No hay caso de \"no hay más piezas\" en Jenga, a menos que definas un límite de turnos\r\n    // Si quisieras un límite, lo agregarías aquí, por ejemplo:\r\n    // if (nextTurnNumber > MAX_JENGA_TURNS) {\r\n    //    console.log(\"Juego de Jenga terminado por límite de turnos.\");\r\n    //    setIsGameActive(false);\r\n    //    if (onExitGame) {\r\n    //      onExitGame();\r\n    //    }\r\n    // }\r\n\r\n  }, [turnCounter, onExitGame, startTurnTimer]);\r\n\r\n\r\n  // useEffect para iniciar el juego de Jenga\r\n  useEffect(() => {\r\n    // En Jenga, no hay datos externos que cargar como en Tetris.\r\n    // Simplemente iniciamos el primer turno.\r\n    const initialTurnNumber = 1;\r\n    setTurnCounter(initialTurnNumber); // Establece el turno inicial a 1\r\n    startTurnTimer(initialTurnNumber); // Inicia el temporizador para el primer turno\r\n    setIsGameActive(true);\r\n\r\n    return () => {\r\n      clearInterval(turnTimerRef.current);\r\n      clearInterval(changePlayerTimerRef.current);\r\n    };\r\n  }, [startTurnTimer]);\r\n\r\n\r\n  // --- Lógica del Temporizador de Turno ---\r\n  useEffect(() => {\r\n    if (isGameActive && turnTimeLeft > 0 && !showChangePlayerMessage) {\r\n      turnTimerRef.current = setInterval(() => {\r\n        setTurnTimeLeft(prevTime => prevTime - 1);\r\n      }, 1000);\r\n    } else if (turnTimeLeft === 0 && isGameActive) {\r\n      clearInterval(turnTimerRef.current);\r\n      console.log(\"Jenga - ¡Tiempo agotado para el turno!\");\r\n      setIsGameActive(false);\r\n      setShowChangePlayerMessage(true);\r\n      setChangePlayerTimer(3); // Reinicia a 3 segundos para el mensaje de cambio de jugador\r\n    }\r\n    return () => clearInterval(turnTimerRef.current);\r\n  }, [turnTimeLeft, isGameActive, showChangePlayerMessage]);\r\n\r\n  // --- Lógica del Temporizador de Cambio de Jugador ---\r\n  useEffect(() => {\r\n    if (showChangePlayerMessage && changePlayerTimer > 0) {\r\n      changePlayerTimerRef.current = setInterval(() => {\r\n        setChangePlayerTimer(prevTime => prevTime - 1);\r\n      }, 1000);\r\n    } else if (changePlayerTimer === 0 && showChangePlayerMessage) {\r\n      clearInterval(changePlayerTimerRef.current);\r\n      setShowChangePlayerMessage(false);\r\n      handleNextTurnLogic(); // Avanza al siguiente turno\r\n    }\r\n    return () => clearInterval(changePlayerTimerRef.current);\r\n  }, [showChangePlayerMessage, changePlayerTimer, handleNextTurnLogic]);\r\n\r\n\r\n  const handleVale = () => {\r\n    clearInterval(turnTimerRef.current);\r\n    setIsGameActive(false); // Pausa el temporizador de turno\r\n    setShowChangePlayerMessage(true); // Muestra el mensaje de cambio de jugador\r\n    setChangePlayerTimer(3); // Inicia el temporizador de cambio de jugador\r\n    // handleNextTurnLogic se llamará automáticamente después de 3 segundos\r\n  };\r\n\r\n  const handleTerminar = () => {\r\n    clearInterval(turnTimerRef.current);\r\n    clearInterval(changePlayerTimerRef.current);\r\n    setIsGameActive(false);\r\n    if (onExitGame) {\r\n      onExitGame();\r\n    }\r\n  };\r\n\r\n  // La barra de progreso se basa en el tiempo inicial del turno\r\n  const currentTurnBaseDuration = getBaseTurnDuration(turnCounter > 0 ? turnCounter : 1);\r\n  const progressPercentage = (turnTimeLeft / currentTurnBaseDuration) * 100;\r\n\r\n\r\n  return (\r\n    <div className=\"game-container bg-white p-6 rounded-lg shadow-md text-center relative\">\r\n      <button\r\n        onClick={onExitGame}\r\n        className=\"absolute top-4 left-4 bg-gray-200 hover:bg-gray-300 p-2 rounded-full text-xl\"\r\n      >\r\n        &#8592;\r\n      </button>\r\n\r\n      <h2 className=\"text-3xl font-bold mb-4 text-gray-800\">¡Jenga!</h2>\r\n      <p className=\"text-xl text-gray-700 mb-4\">Turno #{turnCounter}</p>\r\n\r\n\r\n      <div className=\"w-full bg-gray-200 rounded-full h-4 dark:bg-gray-700 mb-6\">\r\n        <div\r\n          className=\"bg-red-500 h-4 rounded-full transition-all duration-1000 ease-linear\"\r\n          style={{ width: `${progressPercentage}%` }}\r\n        ></div>\r\n      </div>\r\n\r\n      {showChangePlayerMessage ? (\r\n        <div className=\"my-10\">\r\n          <p className=\"text-green-600 text-5xl font-bold mb-4\">¡Cambia de Jugador!</p>\r\n          <p className=\"text-gray-700 text-3xl\">Siguiente turno en {changePlayerTimer}s</p>\r\n        </div>\r\n      ) : (\r\n        // Muestra el tiempo restante grande y centrado\r\n        <div className=\"my-8\">\r\n          <p className=\"text-8xl font-extrabold text-red-700 leading-none\">\r\n            {turnTimeLeft}\r\n            <span className=\"text-4xl\">s</span>\r\n          </p>\r\n          <p className=\"text-2xl text-gray-600 mt-4\">Tiempo para tu movimiento</p>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"flex justify-center space-x-4 mt-8\">\r\n        <button\r\n          onClick={handleVale}\r\n          className=\"bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-lg text-lg transition duration-300\"\r\n        >\r\n          ¡Vale!\r\n        </button>\r\n        <button\r\n          onClick={handleTerminar}\r\n          className=\"bg-red-500 hover:bg-red-600 text-white font-bold py-3 px-6 rounded-lg text-lg transition duration-300\"\r\n        >\r\n          Terminar Juego\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default JengaGame;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}