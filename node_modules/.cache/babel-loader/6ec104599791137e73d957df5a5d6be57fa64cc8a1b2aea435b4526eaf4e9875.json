{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ramos\\\\Downloads\\\\project\\\\src\\\\components\\\\TetrisGame.js\",\n  _s = $RefreshSig$();\n// src/components/TetrisGame.js\n\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\n\n// Importa todas las imágenes de Tetris directamente\n// Esto es necesario porque Webpack/Create React App necesita que las rutas de imagen\n// sean importadas estáticamente para que se incluyan en el bundle final.\nimport I_tetris from '../img/I_tetris.png';\nimport L_tetris from '../img/L_tetris.png';\nimport T_tetris from '../img/T_tetris.png';\nimport Cube_tetris from '../img/Cube_tetris.png';\nimport S_tetris from '../img/S_tetris.png';\n\n// Mapea los nombres de las piezas a sus importaciones de imagen\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst tetrisImageMap = {\n  \"Tetris_Oco_I\": I_tetris,\n  \"Tetris_Oco_L\": L_tetris,\n  \"Tetris_Oco_T\": T_tetris,\n  \"Tetris_Oco_Cube\": Cube_tetris,\n  \"Tetris_Oco_S\": S_tetris\n};\nfunction TetrisGame({\n  players,\n  onExitGame\n}) {\n  _s();\n  const [tetrisPieces, setTetrisPieces] = useState([]); // Todas las piezas cargadas del JSON\n  const [currentPiece, setCurrentPiece] = useState(null); // La pieza actual a mostrar\n  const [turnTimeLeft, setTurnTimeLeft] = useState(10); // 10 segundos para cada turno\n  const [showChangePlayerMessage, setShowChangePlayerMessage] = useState(false);\n  const [changePlayerTimer, setChangePlayerTimer] = useState(0);\n  const [isGameActive, setIsGameActive] = useState(false);\n  const [turnCounter, setTurnCounter] = useState(0); // Para saber si es la primera pieza\n\n  const turnTimerRef = useRef(null);\n  const changePlayerTimerRef = useRef(null);\n\n  // Función para obtener una pieza aleatoria\n  const getRandomPiece = useCallback((excludeFirstITetromino = false) => {\n    if (tetrisPieces.length === 0) return null;\n    let availablePieces = [...tetrisPieces];\n    if (excludeFirstITetromino) {\n      // Filtra \"Tetris_Oco_I\" si es la primera pieza\n      availablePieces = availablePieces.filter(piece => piece.nombre !== \"Tetris_Oco_I\");\n      if (availablePieces.length === 0) {\n        // En caso de que solo tengamos la pieza I, y tengamos que excluirla\n        // esto es una salvaguarda, aunque lo ideal es tener más piezas.\n        console.warn(\"No hay piezas disponibles después de excluir 'Tetris_Oco_I'.\");\n        return null;\n      }\n    }\n    const randomIndex = Math.floor(Math.random() * availablePieces.length);\n    return availablePieces[randomIndex];\n  }, [tetrisPieces]);\n\n  // Inicia el temporizador de turno\n  const startTurnTimer = useCallback(() => {\n    clearInterval(turnTimerRef.current);\n    setTurnTimeLeft(10); // Reinicia a 10 segundos\n    setIsGameActive(true);\n  }, []);\n\n  // Lógica para avanzar al siguiente turno (después de \"Vale\" o tiempo agotado)\n  const handleNextTurnLogic = useCallback(() => {\n    clearInterval(turnTimerRef.current); // Detiene el temporizador actual\n\n    const nextPiece = getRandomPiece(false); // Obtén una pieza aleatoria (no hay restricción para las siguientes)\n    if (nextPiece) {\n      setCurrentPiece(nextPiece);\n      startTurnTimer(); // Inicia el temporizador para el nuevo turno\n      setIsGameActive(true);\n    } else {\n      console.log(\"No hay más piezas para jugar. Juego terminado.\");\n      setIsGameActive(false);\n      if (onExitGame) {\n        onExitGame();\n      }\n    }\n  }, [getRandomPiece, onExitGame, startTurnTimer]);\n\n  // Carga las piezas de tetris_data.json al inicio\n  useEffect(() => {\n    // Usamos una importación dinámica aquí porque el JSON es un archivo de datos\n    // no un módulo de React que necesite ser procesado por Webpack para imágenes.\n    import('../mock/tetris_data.json').then(module => {\n      const data = module.default;\n      setTetrisPieces(data);\n\n      // Selecciona la primera pieza, asegurándose de que no sea \"Tetris_Oco_I\"\n      const firstPiece = getRandomPiece(true); // Excluir la I para la primera pieza\n      if (firstPiece) {\n        setCurrentPiece(firstPiece);\n        startTurnTimer(); // Inicia el temporizador del primer turno\n        setTurnCounter(1); // Es el primer turno\n      } else {\n        console.error(\"No se pudo iniciar el juego de Tetris. No hay piezas válidas.\");\n        setIsGameActive(false);\n      }\n    }).catch(error => {\n      console.error(\"Error al cargar los datos de Tetris:\", error);\n      setIsGameActive(false);\n    });\n\n    // Limpieza de temporizadores al desmontar el componente\n    return () => {\n      clearInterval(turnTimerRef.current);\n      clearInterval(changePlayerTimerRef.current);\n    };\n  }, [getRandomPiece, startTurnTimer]); // Dependencias: getRandomPiece, startTurnTimer\n\n  // --- Lógica del Temporizador de Turno (10 segundos) ---\n  useEffect(() => {\n    if (isGameActive && turnTimeLeft > 0 && !showChangePlayerMessage) {\n      turnTimerRef.current = setInterval(() => {\n        setTurnTimeLeft(prevTime => prevTime - 1);\n      }, 1000);\n    } else if (turnTimeLeft === 0 && isGameActive) {\n      clearInterval(turnTimerRef.current);\n      console.log(\"¡Tiempo agotado para el turno!\");\n      setIsGameActive(false); // Pausa el juego\n      setShowChangePlayerMessage(true); // Muestra el mensaje de cambio de jugador\n      setChangePlayerTimer(7); // 7 segundos para el cambio de jugador\n      setTurnCounter(prev => prev + 1); // Incrementa el contador de turnos para el siguiente jugador\n    }\n    return () => clearInterval(turnTimerRef.current);\n  }, [turnTimeLeft, isGameActive, showChangePlayerMessage]);\n\n  // --- Lógica del Temporizador de Cambio de Jugador (7 segundos) ---\n  useEffect(() => {\n    if (showChangePlayerMessage && changePlayerTimer > 0) {\n      changePlayerTimerRef.current = setInterval(() => {\n        setChangePlayerTimer(prevTime => prevTime - 1);\n      }, 1000);\n    } else if (changePlayerTimer === 0 && showChangePlayerMessage) {\n      clearInterval(changePlayerTimerRef.current);\n      setShowChangePlayerMessage(false); // Oculta el mensaje\n      handleNextTurnLogic(); // Pasa al siguiente turno después del temporizador\n    }\n    return () => clearInterval(changePlayerTimerRef.current);\n  }, [showChangePlayerMessage, changePlayerTimer, handleNextTurnLogic]);\n\n  // --- Manejadores de Botones ---\n\n  const handleVale = () => {\n    clearInterval(turnTimerRef.current); // Detiene el temporizador de turno\n    setIsGameActive(false); // Pausa el juego\n    setShowChangePlayerMessage(true); // Muestra el mensaje de cambio de jugador\n    setChangePlayerTimer(7); // 7 segundos para el cambio de jugador\n    setTurnCounter(prev => prev + 1); // Incrementa el contador de turnos\n  };\n  const handleTerminar = () => {\n    clearInterval(turnTimerRef.current);\n    clearInterval(changePlayerTimerRef.current);\n    setIsGameActive(false);\n    if (onExitGame) {\n      onExitGame();\n    }\n  };\n  const progressPercentage = turnTimeLeft / 10 * 100;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container bg-white p-6 rounded-lg shadow-md text-center relative\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onExitGame,\n      className: \"absolute top-4 left-4 bg-gray-200 hover:bg-gray-300 p-2 rounded-full text-xl\",\n      children: \"\\u2190\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4 text-gray-800\",\n      children: \"\\xA1Tetris!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-lg text-gray-700 mb-4\",\n      children: [\"Turno #\", turnCounter]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full bg-gray-200 rounded-full h-4 dark:bg-gray-700 mb-6\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-purple-500 h-4 rounded-full transition-all duration-1000 ease-linear\",\n        style: {\n          width: `${progressPercentage}%`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-xl font-bold mb-8 text-purple-700\",\n      children: [\"Tiempo restante: \", turnTimeLeft, \"s\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this), showChangePlayerMessage ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"my-10\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-green-600 text-5xl font-bold mb-4\",\n        children: \"\\xA1Cambia de Jugador!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-700 text-3xl\",\n        children: [\"Siguiente pieza en \", changePlayerTimer, \"s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }, this) :\n    // --- Muestra la Pieza de Tetris ---\n    currentPiece ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-3xl font-extrabold text-blue-700 my-4\",\n        children: [\"\\\"\", currentPiece.nombre, \"\\\"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"my-8 flex justify-center\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: tetrisImageMap[currentPiece.nombre],\n          alt: currentPiece.nombre,\n          className: \"max-h-64 object-contain shadow-lg rounded-lg\" // Ajusta el tamaño de la imagen\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-center space-x-4 mt-8\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleVale,\n          className: \"bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-lg text-lg transition duration-300\",\n          children: \"\\xA1Vale!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleTerminar,\n          className: \"bg-red-500 hover:bg-red-600 text-white font-bold py-3 px-6 rounded-lg text-lg transition duration-300\",\n          children: \"Terminar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-gray-600 text-xl my-8\",\n      children: \"Cargando pieza de Tetris...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 5\n  }, this);\n}\n_s(TetrisGame, \"HR2lLWNASlFTPByVjALiWJf1SPg=\");\n_c = TetrisGame;\nexport default TetrisGame;\nvar _c;\n$RefreshReg$(_c, \"TetrisGame\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","I_tetris","L_tetris","T_tetris","Cube_tetris","S_tetris","jsxDEV","_jsxDEV","Fragment","_Fragment","tetrisImageMap","TetrisGame","players","onExitGame","_s","tetrisPieces","setTetrisPieces","currentPiece","setCurrentPiece","turnTimeLeft","setTurnTimeLeft","showChangePlayerMessage","setShowChangePlayerMessage","changePlayerTimer","setChangePlayerTimer","isGameActive","setIsGameActive","turnCounter","setTurnCounter","turnTimerRef","changePlayerTimerRef","getRandomPiece","excludeFirstITetromino","length","availablePieces","filter","piece","nombre","console","warn","randomIndex","Math","floor","random","startTurnTimer","clearInterval","current","handleNextTurnLogic","nextPiece","log","then","module","data","default","firstPiece","error","catch","setInterval","prevTime","prev","handleVale","handleTerminar","progressPercentage","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","style","width","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/ramos/Downloads/project/src/components/TetrisGame.js"],"sourcesContent":["// src/components/TetrisGame.js\r\n\r\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\r\n\r\n// Importa todas las imágenes de Tetris directamente\r\n// Esto es necesario porque Webpack/Create React App necesita que las rutas de imagen\r\n// sean importadas estáticamente para que se incluyan en el bundle final.\r\nimport I_tetris from '../img/I_tetris.png';\r\nimport L_tetris from '../img/L_tetris.png';\r\nimport T_tetris from '../img/T_tetris.png';\r\nimport Cube_tetris from '../img/Cube_tetris.png';\r\nimport S_tetris from '../img/S_tetris.png';\r\n\r\n// Mapea los nombres de las piezas a sus importaciones de imagen\r\nconst tetrisImageMap = {\r\n  \"Tetris_Oco_I\": I_tetris,\r\n  \"Tetris_Oco_L\": L_tetris,\r\n  \"Tetris_Oco_T\": T_tetris,\r\n  \"Tetris_Oco_Cube\": Cube_tetris,\r\n  \"Tetris_Oco_S\": S_tetris,\r\n};\r\n\r\n\r\nfunction TetrisGame({ players, onExitGame }) {\r\n  const [tetrisPieces, setTetrisPieces] = useState([]); // Todas las piezas cargadas del JSON\r\n  const [currentPiece, setCurrentPiece] = useState(null); // La pieza actual a mostrar\r\n  const [turnTimeLeft, setTurnTimeLeft] = useState(10); // 10 segundos para cada turno\r\n  const [showChangePlayerMessage, setShowChangePlayerMessage] = useState(false);\r\n  const [changePlayerTimer, setChangePlayerTimer] = useState(0);\r\n  const [isGameActive, setIsGameActive] = useState(false);\r\n  const [turnCounter, setTurnCounter] = useState(0); // Para saber si es la primera pieza\r\n\r\n  const turnTimerRef = useRef(null);\r\n  const changePlayerTimerRef = useRef(null);\r\n\r\n  // Función para obtener una pieza aleatoria\r\n  const getRandomPiece = useCallback((excludeFirstITetromino = false) => {\r\n    if (tetrisPieces.length === 0) return null;\r\n\r\n    let availablePieces = [...tetrisPieces];\r\n\r\n    if (excludeFirstITetromino) {\r\n      // Filtra \"Tetris_Oco_I\" si es la primera pieza\r\n      availablePieces = availablePieces.filter(piece => piece.nombre !== \"Tetris_Oco_I\");\r\n      if (availablePieces.length === 0) {\r\n        // En caso de que solo tengamos la pieza I, y tengamos que excluirla\r\n        // esto es una salvaguarda, aunque lo ideal es tener más piezas.\r\n        console.warn(\"No hay piezas disponibles después de excluir 'Tetris_Oco_I'.\");\r\n        return null; \r\n      }\r\n    }\r\n    \r\n    const randomIndex = Math.floor(Math.random() * availablePieces.length);\r\n    return availablePieces[randomIndex];\r\n  }, [tetrisPieces]);\r\n\r\n\r\n  // Inicia el temporizador de turno\r\n  const startTurnTimer = useCallback(() => {\r\n    clearInterval(turnTimerRef.current);\r\n    setTurnTimeLeft(10); // Reinicia a 10 segundos\r\n    setIsGameActive(true);\r\n  }, []);\r\n\r\n  // Lógica para avanzar al siguiente turno (después de \"Vale\" o tiempo agotado)\r\n  const handleNextTurnLogic = useCallback(() => {\r\n    clearInterval(turnTimerRef.current); // Detiene el temporizador actual\r\n    \r\n    const nextPiece = getRandomPiece(false); // Obtén una pieza aleatoria (no hay restricción para las siguientes)\r\n    if (nextPiece) {\r\n      setCurrentPiece(nextPiece);\r\n      startTurnTimer(); // Inicia el temporizador para el nuevo turno\r\n      setIsGameActive(true);\r\n    } else {\r\n      console.log(\"No hay más piezas para jugar. Juego terminado.\");\r\n      setIsGameActive(false);\r\n      if (onExitGame) {\r\n        onExitGame();\r\n      }\r\n    }\r\n  }, [getRandomPiece, onExitGame, startTurnTimer]);\r\n\r\n\r\n  // Carga las piezas de tetris_data.json al inicio\r\n  useEffect(() => {\r\n    // Usamos una importación dinámica aquí porque el JSON es un archivo de datos\r\n    // no un módulo de React que necesite ser procesado por Webpack para imágenes.\r\n    import('../mock/tetris_data.json')\r\n      .then(module => {\r\n        const data = module.default;\r\n        setTetrisPieces(data);\r\n\r\n        // Selecciona la primera pieza, asegurándose de que no sea \"Tetris_Oco_I\"\r\n        const firstPiece = getRandomPiece(true); // Excluir la I para la primera pieza\r\n        if (firstPiece) {\r\n          setCurrentPiece(firstPiece);\r\n          startTurnTimer(); // Inicia el temporizador del primer turno\r\n          setTurnCounter(1); // Es el primer turno\r\n        } else {\r\n            console.error(\"No se pudo iniciar el juego de Tetris. No hay piezas válidas.\");\r\n            setIsGameActive(false);\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error(\"Error al cargar los datos de Tetris:\", error);\r\n        setIsGameActive(false);\r\n      });\r\n\r\n    // Limpieza de temporizadores al desmontar el componente\r\n    return () => {\r\n      clearInterval(turnTimerRef.current);\r\n      clearInterval(changePlayerTimerRef.current);\r\n    };\r\n  }, [getRandomPiece, startTurnTimer]); // Dependencias: getRandomPiece, startTurnTimer\r\n\r\n  // --- Lógica del Temporizador de Turno (10 segundos) ---\r\n  useEffect(() => {\r\n    if (isGameActive && turnTimeLeft > 0 && !showChangePlayerMessage) {\r\n      turnTimerRef.current = setInterval(() => {\r\n        setTurnTimeLeft(prevTime => prevTime - 1);\r\n      }, 1000);\r\n    } else if (turnTimeLeft === 0 && isGameActive) {\r\n      clearInterval(turnTimerRef.current);\r\n      console.log(\"¡Tiempo agotado para el turno!\");\r\n      setIsGameActive(false); // Pausa el juego\r\n      setShowChangePlayerMessage(true); // Muestra el mensaje de cambio de jugador\r\n      setChangePlayerTimer(7); // 7 segundos para el cambio de jugador\r\n      setTurnCounter(prev => prev + 1); // Incrementa el contador de turnos para el siguiente jugador\r\n    }\r\n    return () => clearInterval(turnTimerRef.current);\r\n  }, [turnTimeLeft, isGameActive, showChangePlayerMessage]);\r\n\r\n  // --- Lógica del Temporizador de Cambio de Jugador (7 segundos) ---\r\n  useEffect(() => {\r\n    if (showChangePlayerMessage && changePlayerTimer > 0) {\r\n      changePlayerTimerRef.current = setInterval(() => {\r\n        setChangePlayerTimer(prevTime => prevTime - 1);\r\n      }, 1000);\r\n    } else if (changePlayerTimer === 0 && showChangePlayerMessage) {\r\n      clearInterval(changePlayerTimerRef.current);\r\n      setShowChangePlayerMessage(false); // Oculta el mensaje\r\n      handleNextTurnLogic(); // Pasa al siguiente turno después del temporizador\r\n    }\r\n    return () => clearInterval(changePlayerTimerRef.current);\r\n  }, [showChangePlayerMessage, changePlayerTimer, handleNextTurnLogic]);\r\n\r\n\r\n  // --- Manejadores de Botones ---\r\n\r\n  const handleVale = () => {\r\n    clearInterval(turnTimerRef.current); // Detiene el temporizador de turno\r\n    setIsGameActive(false); // Pausa el juego\r\n    setShowChangePlayerMessage(true); // Muestra el mensaje de cambio de jugador\r\n    setChangePlayerTimer(7); // 7 segundos para el cambio de jugador\r\n    setTurnCounter(prev => prev + 1); // Incrementa el contador de turnos\r\n  };\r\n\r\n  const handleTerminar = () => {\r\n    clearInterval(turnTimerRef.current);\r\n    clearInterval(changePlayerTimerRef.current);\r\n    setIsGameActive(false);\r\n    if (onExitGame) {\r\n      onExitGame();\r\n    }\r\n  };\r\n\r\n  const progressPercentage = (turnTimeLeft / 10) * 100;\r\n\r\n  return (\r\n    <div className=\"game-container bg-white p-6 rounded-lg shadow-md text-center relative\">\r\n      <button\r\n        onClick={onExitGame}\r\n        className=\"absolute top-4 left-4 bg-gray-200 hover:bg-gray-300 p-2 rounded-full text-xl\"\r\n      >\r\n        &#8592;\r\n      </button>\r\n\r\n      <h2 className=\"text-2xl font-bold mb-4 text-gray-800\">¡Tetris!</h2>\r\n      {/* Puedes usar players prop aquí si quieres mostrar el jugador actual */}\r\n      {/* <p className=\"text-lg text-gray-700 mb-4\">Jugador actual: {players[currentTurnPlayerIndex]}</p> */}\r\n      <p className=\"text-lg text-gray-700 mb-4\">Turno #{turnCounter}</p>\r\n\r\n\r\n      {/* Barra de progreso del tiempo de turno */}\r\n      <div className=\"w-full bg-gray-200 rounded-full h-4 dark:bg-gray-700 mb-6\">\r\n        <div\r\n          className=\"bg-purple-500 h-4 rounded-full transition-all duration-1000 ease-linear\"\r\n          style={{ width: `${progressPercentage}%` }}\r\n        ></div>\r\n      </div>\r\n      <div className=\"text-xl font-bold mb-8 text-purple-700\">Tiempo restante: {turnTimeLeft}s</div>\r\n\r\n      {/* --- Mensaje de Cambio de Jugador --- */}\r\n      {showChangePlayerMessage ? (\r\n        <div className=\"my-10\">\r\n          <p className=\"text-green-600 text-5xl font-bold mb-4\">¡Cambia de Jugador!</p>\r\n          <p className=\"text-gray-700 text-3xl\">Siguiente pieza en {changePlayerTimer}s</p>\r\n        </div>\r\n      ) : (\r\n        // --- Muestra la Pieza de Tetris ---\r\n        currentPiece ? (\r\n          <>\r\n            <div className=\"text-3xl font-extrabold text-blue-700 my-4\">\r\n              \"{currentPiece.nombre}\"\r\n            </div>\r\n            <div className=\"my-8 flex justify-center\">\r\n              {/* Usa el tetrisImageMap para obtener la URL de la imagen */}\r\n              <img \r\n                src={tetrisImageMap[currentPiece.nombre]} \r\n                alt={currentPiece.nombre} \r\n                className=\"max-h-64 object-contain shadow-lg rounded-lg\" // Ajusta el tamaño de la imagen\r\n              />\r\n            </div>\r\n\r\n            <div className=\"flex justify-center space-x-4 mt-8\">\r\n              <button\r\n                onClick={handleVale}\r\n                className=\"bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-lg text-lg transition duration-300\"\r\n              >\r\n                ¡Vale!\r\n              </button>\r\n              <button\r\n                onClick={handleTerminar}\r\n                className=\"bg-red-500 hover:bg-red-600 text-white font-bold py-3 px-6 rounded-lg text-lg transition duration-300\"\r\n              >\r\n                Terminar\r\n              </button>\r\n            </div>\r\n          </>\r\n        ) : (\r\n          <div className=\"text-gray-600 text-xl my-8\">Cargando pieza de Tetris...</div>\r\n        )\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TetrisGame;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}