{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ramos\\\\Downloads\\\\project\\\\src\\\\components\\\\TetrisGame.js\",\n  _s = $RefreshSig$();\n// src/components/TetrisGame.js\n\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\n\n// Si moviste las imágenes a `public` y ajustaste el JSON, esta función no es necesaria.\n// Si aún usas `require()`, mantén la versión de la solución anterior.\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction TetrisGame({\n  players,\n  onExitGame\n}) {\n  _s();\n  // turnTimeLeft será el tiempo restante en el turno actual\n  // turnCounter rastrea el número de turnos completados\n  const [tetrisPieces, setTetrisPieces] = useState([]);\n  const [currentPiece, setCurrentPiece] = useState(null);\n  const [turnTimeLeft, setTurnTimeLeft] = useState(10); // Tiempo restante en el turno actual\n  const [showChangePlayerMessage, setShowChangePlayerMessage] = useState(false);\n  const [changePlayerTimer, setChangePlayerTimer] = useState(3);\n  const [isGameActive, setIsGameActive] = useState(false);\n  const [turnCounter, setTurnCounter] = useState(0); // Inicia en 0, se incrementa antes de cada turno.\n\n  const turnTimerRef = useRef(null);\n  const changePlayerTimerRef = useRef(null);\n\n  // Función para calcular el tiempo base del turno según el contador\n  const getBaseTurnDuration = useCallback(currentTurn => {\n    let baseTime = 10; // Tiempo inicial base\n\n    // Cada 5 turnos (después del turno 5, 10, 15, etc.), reduce el tiempo en 1 segundo\n    // Math.floor((currentTurn - 1) / 5) para que empiece a bajar *después* del turno 5\n    // (ej. turno 6 -> 1, turno 11 -> 2)\n    const reduction = Math.floor((currentTurn - 1) / 5);\n\n    // Asegúrate de que el tiempo mínimo no sea negativo o cero si no es lo que quieres\n    return Math.max(1, baseTime - reduction); // Mínimo de 1 segundo\n  }, []);\n  const getRandomPiece = useCallback((excludeFirstITetromino = false) => {\n    if (tetrisPieces.length === 0) return null;\n    let availablePieces = [...tetrisPieces];\n    if (excludeFirstITetromino) {\n      availablePieces = availablePieces.filter(piece => piece.nombre !== \"Tetris_Oco_I\");\n      if (availablePieces.length === 0) {\n        console.warn(\"No hay piezas disponibles después de excluir 'Tetris_Oco_I'.\");\n        return null;\n      }\n    }\n    const randomIndex = Math.floor(Math.random() * availablePieces.length);\n    return availablePieces[randomIndex];\n  }, [tetrisPieces]);\n  const startTurnTimer = useCallback(turnNumber => {\n    clearInterval(turnTimerRef.current);\n    const duration = getBaseTurnDuration(turnNumber); // <--- Usa la nueva función\n    setTurnTimeLeft(duration);\n    setIsGameActive(true);\n    console.log(`Turno #${turnNumber}. Duración del turno: ${duration}s`); // Para depuración\n  }, [getBaseTurnDuration]); // Dependencia agregada\n\n  const handleNextTurnLogic = useCallback(() => {\n    clearInterval(turnTimerRef.current);\n    const nextTurnNumber = turnCounter + 1; // Calculamos el número del siguiente turno\n    setTurnCounter(nextTurnNumber); // Actualizamos el contador de turnos\n\n    const nextPiece = getRandomPiece(false);\n    if (nextPiece) {\n      setCurrentPiece(nextPiece);\n      startTurnTimer(nextTurnNumber); // Pasa el número de turno a startTurnTimer\n      setIsGameActive(true);\n    } else {\n      console.log(\"No hay más piezas para jugar. Juego terminado.\");\n      setIsGameActive(false);\n      if (onExitGame) {\n        onExitGame();\n      }\n    }\n  }, [turnCounter, getRandomPiece, onExitGame, startTurnTimer]); // Dependencia agregada `turnCounter`\n\n  useEffect(() => {\n    import('../mock/tetris_data.json').then(module => {\n      const data = module.default;\n      setTetrisPieces(data);\n      if (data.length === 0) {\n        console.error(\"tetris_data.json está vacío o no contiene piezas.\");\n        setIsGameActive(false);\n        return;\n      }\n\n      // Iniciar el juego con el primer turno\n      const initialTurnNumber = 1;\n      setTurnCounter(initialTurnNumber); // Establece el turno inicial a 1\n\n      const firstPiece = getRandomPiece(true);\n      if (firstPiece) {\n        setCurrentPiece(firstPiece);\n        startTurnTimer(initialTurnNumber); // Pasa el número de turno\n        setIsGameActive(true);\n      } else {\n        console.error(\"No se pudo seleccionar la primera pieza de Tetris.\");\n        setIsGameActive(false);\n      }\n    }).catch(error => {\n      console.error(\"Error al cargar los datos de Tetris:\", error);\n      setIsGameActive(false);\n    });\n    return () => {\n      clearInterval(turnTimerRef.current);\n      clearInterval(changePlayerTimerRef.current);\n    };\n  }, [getRandomPiece, startTurnTimer]);\n\n  // --- Lógica del Temporizador de Turno ---\n  useEffect(() => {\n    if (isGameActive && turnTimeLeft > 0 && !showChangePlayerMessage) {\n      turnTimerRef.current = setInterval(() => {\n        setTurnTimeLeft(prevTime => prevTime - 1);\n      }, 1000);\n    } else if (turnTimeLeft === 0 && isGameActive) {\n      clearInterval(turnTimerRef.current);\n      console.log(\"¡Tiempo agotado para el turno!\");\n      setIsGameActive(false);\n      setShowChangePlayerMessage(true);\n      setChangePlayerTimer(3);\n    }\n    return () => clearInterval(turnTimerRef.current);\n  }, [turnTimeLeft, isGameActive, showChangePlayerMessage]);\n\n  // --- Lógica del Temporizador de Cambio de Jugador ---\n  useEffect(() => {\n    if (showChangePlayerMessage && changePlayerTimer > 0) {\n      changePlayerTimerRef.current = setInterval(() => {\n        setChangePlayerTimer(prevTime => prevTime - 1);\n      }, 1000);\n    } else if (changePlayerTimer === 0 && showChangePlayerMessage) {\n      clearInterval(changePlayerTimerRef.current);\n      setShowChangePlayerMessage(false);\n      handleNextTurnLogic(); // Esto ya incrementa turnCounter\n    }\n    return () => clearInterval(changePlayerTimerRef.current);\n  }, [showChangePlayerMessage, changePlayerTimer, handleNextTurnLogic]);\n  const handleVale = () => {\n    clearInterval(turnTimerRef.current);\n    setIsGameActive(false);\n    setShowChangePlayerMessage(true);\n    setChangePlayerTimer(3);\n    // El handleNextTurnLogic que se llama después de 3s en el timer\n    // ya se encargará de incrementar el turnCounter y reiniciar el juego.\n  };\n  const handleTerminar = () => {\n    clearInterval(turnTimerRef.current);\n    clearInterval(changePlayerTimerRef.current);\n    setIsGameActive(false);\n    if (onExitGame) {\n      onExitGame();\n    }\n  };\n\n  // La barra de progreso se basa en el tiempo inicial del turno, no en el actual\n  const currentTurnBaseDuration = getBaseTurnDuration(turnCounter > 0 ? turnCounter : 1); // Asegura que siempre haya un valor para la barra\n  const progressPercentage = turnTimeLeft / currentTurnBaseDuration * 100;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container bg-white p-6 rounded-lg shadow-md text-center relative\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onExitGame,\n      className: \"absolute top-4 left-4 bg-gray-200 hover:bg-gray-300 p-2 rounded-full text-xl\",\n      children: \"\\u2190\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4 text-gray-800\",\n      children: \"\\xA1Tetris!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-lg text-gray-700 mb-4\",\n      children: [\"Turno #\", turnCounter]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full bg-gray-200 rounded-full h-4 dark:bg-gray-700 mb-6\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-purple-500 h-4 rounded-full transition-all duration-1000 ease-linear\",\n        style: {\n          width: `${progressPercentage}%`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-xl font-bold mb-8 text-purple-700\",\n      children: [\"Tiempo restante: \", turnTimeLeft, \"s\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this), showChangePlayerMessage ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"my-10\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-green-600 text-5xl font-bold mb-4\",\n        children: \"\\xA1Cambia de Jugador!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-700 text-3xl\",\n        children: [\"Siguiente pieza en \", changePlayerTimer, \"s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 9\n    }, this) : currentPiece ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-3xl font-extrabold text-blue-700 my-4\",\n        children: [\"\\\"\", currentPiece.nombre, \"\\\"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"my-8 flex justify-center\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: currentPiece.url_imagen,\n          alt: currentPiece.nombre,\n          className: \"max-h-64 object-contain shadow-lg rounded-lg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-center space-x-4 mt-8\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleVale,\n          className: \"bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-lg text-lg transition duration-300\",\n          children: \"\\xA1Vale!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleTerminar,\n          className: \"bg-red-500 hover:bg-red-600 text-white font-bold py-3 px-6 rounded-lg text-lg transition duration-300\",\n          children: \"Terminar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-gray-600 text-xl my-8\",\n      children: \"Cargando pieza de Tetris...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 5\n  }, this);\n}\n_s(TetrisGame, \"IwK8W93RrlrNxmGh8BvJJhndJ9s=\");\n_c = TetrisGame;\nexport default TetrisGame;\nvar _c;\n$RefreshReg$(_c, \"TetrisGame\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","jsxDEV","_jsxDEV","Fragment","_Fragment","TetrisGame","players","onExitGame","_s","tetrisPieces","setTetrisPieces","currentPiece","setCurrentPiece","turnTimeLeft","setTurnTimeLeft","showChangePlayerMessage","setShowChangePlayerMessage","changePlayerTimer","setChangePlayerTimer","isGameActive","setIsGameActive","turnCounter","setTurnCounter","turnTimerRef","changePlayerTimerRef","getBaseTurnDuration","currentTurn","baseTime","reduction","Math","floor","max","getRandomPiece","excludeFirstITetromino","length","availablePieces","filter","piece","nombre","console","warn","randomIndex","random","startTurnTimer","turnNumber","clearInterval","current","duration","log","handleNextTurnLogic","nextTurnNumber","nextPiece","then","module","data","default","error","initialTurnNumber","firstPiece","catch","setInterval","prevTime","handleVale","handleTerminar","currentTurnBaseDuration","progressPercentage","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","style","width","src","url_imagen","alt","_c","$RefreshReg$"],"sources":["C:/Users/ramos/Downloads/project/src/components/TetrisGame.js"],"sourcesContent":["// src/components/TetrisGame.js\r\n\r\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\r\n\r\n// Si moviste las imágenes a `public` y ajustaste el JSON, esta función no es necesaria.\r\n// Si aún usas `require()`, mantén la versión de la solución anterior.\r\n\r\n\r\nfunction TetrisGame({ players, onExitGame }) {\r\n  // turnTimeLeft será el tiempo restante en el turno actual\r\n  // turnCounter rastrea el número de turnos completados\r\n  const [tetrisPieces, setTetrisPieces] = useState([]);\r\n  const [currentPiece, setCurrentPiece] = useState(null);\r\n  const [turnTimeLeft, setTurnTimeLeft] = useState(10); // Tiempo restante en el turno actual\r\n  const [showChangePlayerMessage, setShowChangePlayerMessage] = useState(false);\r\n  const [changePlayerTimer, setChangePlayerTimer] = useState(3);\r\n  const [isGameActive, setIsGameActive] = useState(false);\r\n  const [turnCounter, setTurnCounter] = useState(0); // Inicia en 0, se incrementa antes de cada turno.\r\n\r\n  const turnTimerRef = useRef(null);\r\n  const changePlayerTimerRef = useRef(null);\r\n\r\n  // Función para calcular el tiempo base del turno según el contador\r\n  const getBaseTurnDuration = useCallback((currentTurn) => {\r\n    let baseTime = 10; // Tiempo inicial base\r\n\r\n    // Cada 5 turnos (después del turno 5, 10, 15, etc.), reduce el tiempo en 1 segundo\r\n    // Math.floor((currentTurn - 1) / 5) para que empiece a bajar *después* del turno 5\r\n    // (ej. turno 6 -> 1, turno 11 -> 2)\r\n    const reduction = Math.floor((currentTurn - 1) / 5);\r\n\r\n    // Asegúrate de que el tiempo mínimo no sea negativo o cero si no es lo que quieres\r\n    return Math.max(1, baseTime - reduction); // Mínimo de 1 segundo\r\n  }, []);\r\n\r\n\r\n  const getRandomPiece = useCallback((excludeFirstITetromino = false) => {\r\n    if (tetrisPieces.length === 0) return null;\r\n\r\n    let availablePieces = [...tetrisPieces];\r\n\r\n    if (excludeFirstITetromino) {\r\n      availablePieces = availablePieces.filter(piece => piece.nombre !== \"Tetris_Oco_I\");\r\n      if (availablePieces.length === 0) {\r\n        console.warn(\"No hay piezas disponibles después de excluir 'Tetris_Oco_I'.\");\r\n        return null;\r\n      }\r\n    }\r\n\r\n    const randomIndex = Math.floor(Math.random() * availablePieces.length);\r\n    return availablePieces[randomIndex];\r\n  }, [tetrisPieces]);\r\n\r\n\r\n  const startTurnTimer = useCallback((turnNumber) => {\r\n    clearInterval(turnTimerRef.current);\r\n    const duration = getBaseTurnDuration(turnNumber); // <--- Usa la nueva función\r\n    setTurnTimeLeft(duration);\r\n    setIsGameActive(true);\r\n    console.log(`Turno #${turnNumber}. Duración del turno: ${duration}s`); // Para depuración\r\n  }, [getBaseTurnDuration]); // Dependencia agregada\r\n\r\n\r\n  const handleNextTurnLogic = useCallback(() => {\r\n    clearInterval(turnTimerRef.current);\r\n\r\n    const nextTurnNumber = turnCounter + 1; // Calculamos el número del siguiente turno\r\n    setTurnCounter(nextTurnNumber); // Actualizamos el contador de turnos\r\n\r\n    const nextPiece = getRandomPiece(false);\r\n    if (nextPiece) {\r\n      setCurrentPiece(nextPiece);\r\n      startTurnTimer(nextTurnNumber); // Pasa el número de turno a startTurnTimer\r\n      setIsGameActive(true);\r\n    } else {\r\n      console.log(\"No hay más piezas para jugar. Juego terminado.\");\r\n      setIsGameActive(false);\r\n      if (onExitGame) {\r\n        onExitGame();\r\n      }\r\n    }\r\n  }, [turnCounter, getRandomPiece, onExitGame, startTurnTimer]); // Dependencia agregada `turnCounter`\r\n\r\n\r\n  useEffect(() => {\r\n    import('../mock/tetris_data.json')\r\n      .then(module => {\r\n        const data = module.default;\r\n        setTetrisPieces(data);\r\n\r\n        if (data.length === 0) {\r\n          console.error(\"tetris_data.json está vacío o no contiene piezas.\");\r\n          setIsGameActive(false);\r\n          return;\r\n        }\r\n\r\n        // Iniciar el juego con el primer turno\r\n        const initialTurnNumber = 1;\r\n        setTurnCounter(initialTurnNumber); // Establece el turno inicial a 1\r\n\r\n        const firstPiece = getRandomPiece(true);\r\n        if (firstPiece) {\r\n          setCurrentPiece(firstPiece);\r\n          startTurnTimer(initialTurnNumber); // Pasa el número de turno\r\n          setIsGameActive(true);\r\n        } else {\r\n            console.error(\"No se pudo seleccionar la primera pieza de Tetris.\");\r\n            setIsGameActive(false);\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error(\"Error al cargar los datos de Tetris:\", error);\r\n        setIsGameActive(false);\r\n      });\r\n\r\n    return () => {\r\n      clearInterval(turnTimerRef.current);\r\n      clearInterval(changePlayerTimerRef.current);\r\n    };\r\n  }, [getRandomPiece, startTurnTimer]);\r\n\r\n\r\n  // --- Lógica del Temporizador de Turno ---\r\n  useEffect(() => {\r\n    if (isGameActive && turnTimeLeft > 0 && !showChangePlayerMessage) {\r\n      turnTimerRef.current = setInterval(() => {\r\n        setTurnTimeLeft(prevTime => prevTime - 1);\r\n      }, 1000);\r\n    } else if (turnTimeLeft === 0 && isGameActive) {\r\n      clearInterval(turnTimerRef.current);\r\n      console.log(\"¡Tiempo agotado para el turno!\");\r\n      setIsGameActive(false);\r\n      setShowChangePlayerMessage(true);\r\n      setChangePlayerTimer(3);\r\n    }\r\n    return () => clearInterval(turnTimerRef.current);\r\n  }, [turnTimeLeft, isGameActive, showChangePlayerMessage]);\r\n\r\n  // --- Lógica del Temporizador de Cambio de Jugador ---\r\n  useEffect(() => {\r\n    if (showChangePlayerMessage && changePlayerTimer > 0) {\r\n      changePlayerTimerRef.current = setInterval(() => {\r\n        setChangePlayerTimer(prevTime => prevTime - 1);\r\n      }, 1000);\r\n    } else if (changePlayerTimer === 0 && showChangePlayerMessage) {\r\n      clearInterval(changePlayerTimerRef.current);\r\n      setShowChangePlayerMessage(false);\r\n      handleNextTurnLogic(); // Esto ya incrementa turnCounter\r\n    }\r\n    return () => clearInterval(changePlayerTimerRef.current);\r\n  }, [showChangePlayerMessage, changePlayerTimer, handleNextTurnLogic]);\r\n\r\n\r\n  const handleVale = () => {\r\n    clearInterval(turnTimerRef.current);\r\n    setIsGameActive(false);\r\n    setShowChangePlayerMessage(true);\r\n    setChangePlayerTimer(3);\r\n    // El handleNextTurnLogic que se llama después de 3s en el timer\r\n    // ya se encargará de incrementar el turnCounter y reiniciar el juego.\r\n  };\r\n\r\n  const handleTerminar = () => {\r\n    clearInterval(turnTimerRef.current);\r\n    clearInterval(changePlayerTimerRef.current);\r\n    setIsGameActive(false);\r\n    if (onExitGame) {\r\n      onExitGame();\r\n    }\r\n  };\r\n\r\n  // La barra de progreso se basa en el tiempo inicial del turno, no en el actual\r\n  const currentTurnBaseDuration = getBaseTurnDuration(turnCounter > 0 ? turnCounter : 1); // Asegura que siempre haya un valor para la barra\r\n  const progressPercentage = (turnTimeLeft / currentTurnBaseDuration) * 100;\r\n\r\n\r\n  return (\r\n    <div className=\"game-container bg-white p-6 rounded-lg shadow-md text-center relative\">\r\n      <button\r\n        onClick={onExitGame}\r\n        className=\"absolute top-4 left-4 bg-gray-200 hover:bg-gray-300 p-2 rounded-full text-xl\"\r\n      >\r\n        &#8592;\r\n      </button>\r\n\r\n      <h2 className=\"text-2xl font-bold mb-4 text-gray-800\">¡Tetris!</h2>\r\n      <p className=\"text-lg text-gray-700 mb-4\">Turno #{turnCounter}</p>\r\n\r\n\r\n      <div className=\"w-full bg-gray-200 rounded-full h-4 dark:bg-gray-700 mb-6\">\r\n        <div\r\n          className=\"bg-purple-500 h-4 rounded-full transition-all duration-1000 ease-linear\"\r\n          style={{ width: `${progressPercentage}%` }}\r\n        ></div>\r\n      </div>\r\n      <div className=\"text-xl font-bold mb-8 text-purple-700\">Tiempo restante: {turnTimeLeft}s</div>\r\n\r\n      {showChangePlayerMessage ? (\r\n        <div className=\"my-10\">\r\n          <p className=\"text-green-600 text-5xl font-bold mb-4\">¡Cambia de Jugador!</p>\r\n          <p className=\"text-gray-700 text-3xl\">Siguiente pieza en {changePlayerTimer}s</p>\r\n        </div>\r\n      ) : (\r\n        currentPiece ? (\r\n          <>\r\n            <div className=\"text-3xl font-extrabold text-blue-700 my-4\">\r\n              \"{currentPiece.nombre}\"\r\n            </div>\r\n            <div className=\"my-8 flex justify-center\">\r\n              {/* Usa la url_imagen directamente si las moviste a public */}\r\n              <img\r\n                src={currentPiece.url_imagen}\r\n                alt={currentPiece.nombre}\r\n                className=\"max-h-64 object-contain shadow-lg rounded-lg\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"flex justify-center space-x-4 mt-8\">\r\n              <button\r\n                onClick={handleVale}\r\n                className=\"bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-lg text-lg transition duration-300\"\r\n              >\r\n                ¡Vale!\r\n              </button>\r\n              <button\r\n                onClick={handleTerminar}\r\n                className=\"bg-red-500 hover:bg-red-600 text-white font-bold py-3 px-6 rounded-lg text-lg transition duration-300\"\r\n              >\r\n                Terminar\r\n              </button>\r\n            </div>\r\n          </>\r\n        ) : (\r\n          <div className=\"text-gray-600 text-xl my-8\">Cargando pieza de Tetris...</div>\r\n        )\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TetrisGame;"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,EAAEC,WAAW,QAAQ,OAAO;;AAEvE;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAGA,SAASC,UAAUA,CAAC;EAAEC,OAAO;EAAEC;AAAW,CAAC,EAAE;EAAAC,EAAA;EAC3C;EACA;EACA,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACc,YAAY,EAAEC,eAAe,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACgB,YAAY,EAAEC,eAAe,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACtD,MAAM,CAACkB,uBAAuB,EAAEC,0BAA0B,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC;EAC7E,MAAM,CAACoB,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGrB,QAAQ,CAAC,CAAC,CAAC;EAC7D,MAAM,CAACsB,YAAY,EAAEC,eAAe,CAAC,GAAGvB,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACwB,WAAW,EAAEC,cAAc,CAAC,GAAGzB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;;EAEnD,MAAM0B,YAAY,GAAGxB,MAAM,CAAC,IAAI,CAAC;EACjC,MAAMyB,oBAAoB,GAAGzB,MAAM,CAAC,IAAI,CAAC;;EAEzC;EACA,MAAM0B,mBAAmB,GAAGzB,WAAW,CAAE0B,WAAW,IAAK;IACvD,IAAIC,QAAQ,GAAG,EAAE,CAAC,CAAC;;IAEnB;IACA;IACA;IACA,MAAMC,SAAS,GAAGC,IAAI,CAACC,KAAK,CAAC,CAACJ,WAAW,GAAG,CAAC,IAAI,CAAC,CAAC;;IAEnD;IACA,OAAOG,IAAI,CAACE,GAAG,CAAC,CAAC,EAAEJ,QAAQ,GAAGC,SAAS,CAAC,CAAC,CAAC;EAC5C,CAAC,EAAE,EAAE,CAAC;EAGN,MAAMI,cAAc,GAAGhC,WAAW,CAAC,CAACiC,sBAAsB,GAAG,KAAK,KAAK;IACrE,IAAIxB,YAAY,CAACyB,MAAM,KAAK,CAAC,EAAE,OAAO,IAAI;IAE1C,IAAIC,eAAe,GAAG,CAAC,GAAG1B,YAAY,CAAC;IAEvC,IAAIwB,sBAAsB,EAAE;MAC1BE,eAAe,GAAGA,eAAe,CAACC,MAAM,CAACC,KAAK,IAAIA,KAAK,CAACC,MAAM,KAAK,cAAc,CAAC;MAClF,IAAIH,eAAe,CAACD,MAAM,KAAK,CAAC,EAAE;QAChCK,OAAO,CAACC,IAAI,CAAC,8DAA8D,CAAC;QAC5E,OAAO,IAAI;MACb;IACF;IAEA,MAAMC,WAAW,GAAGZ,IAAI,CAACC,KAAK,CAACD,IAAI,CAACa,MAAM,CAAC,CAAC,GAAGP,eAAe,CAACD,MAAM,CAAC;IACtE,OAAOC,eAAe,CAACM,WAAW,CAAC;EACrC,CAAC,EAAE,CAAChC,YAAY,CAAC,CAAC;EAGlB,MAAMkC,cAAc,GAAG3C,WAAW,CAAE4C,UAAU,IAAK;IACjDC,aAAa,CAACtB,YAAY,CAACuB,OAAO,CAAC;IACnC,MAAMC,QAAQ,GAAGtB,mBAAmB,CAACmB,UAAU,CAAC,CAAC,CAAC;IAClD9B,eAAe,CAACiC,QAAQ,CAAC;IACzB3B,eAAe,CAAC,IAAI,CAAC;IACrBmB,OAAO,CAACS,GAAG,CAAC,UAAUJ,UAAU,yBAAyBG,QAAQ,GAAG,CAAC,CAAC,CAAC;EACzE,CAAC,EAAE,CAACtB,mBAAmB,CAAC,CAAC,CAAC,CAAC;;EAG3B,MAAMwB,mBAAmB,GAAGjD,WAAW,CAAC,MAAM;IAC5C6C,aAAa,CAACtB,YAAY,CAACuB,OAAO,CAAC;IAEnC,MAAMI,cAAc,GAAG7B,WAAW,GAAG,CAAC,CAAC,CAAC;IACxCC,cAAc,CAAC4B,cAAc,CAAC,CAAC,CAAC;;IAEhC,MAAMC,SAAS,GAAGnB,cAAc,CAAC,KAAK,CAAC;IACvC,IAAImB,SAAS,EAAE;MACbvC,eAAe,CAACuC,SAAS,CAAC;MAC1BR,cAAc,CAACO,cAAc,CAAC,CAAC,CAAC;MAChC9B,eAAe,CAAC,IAAI,CAAC;IACvB,CAAC,MAAM;MACLmB,OAAO,CAACS,GAAG,CAAC,gDAAgD,CAAC;MAC7D5B,eAAe,CAAC,KAAK,CAAC;MACtB,IAAIb,UAAU,EAAE;QACdA,UAAU,CAAC,CAAC;MACd;IACF;EACF,CAAC,EAAE,CAACc,WAAW,EAAEW,cAAc,EAAEzB,UAAU,EAAEoC,cAAc,CAAC,CAAC,CAAC,CAAC;;EAG/D7C,SAAS,CAAC,MAAM;IACd,MAAM,CAAC,0BAA0B,CAAC,CAC/BsD,IAAI,CAACC,MAAM,IAAI;MACd,MAAMC,IAAI,GAAGD,MAAM,CAACE,OAAO;MAC3B7C,eAAe,CAAC4C,IAAI,CAAC;MAErB,IAAIA,IAAI,CAACpB,MAAM,KAAK,CAAC,EAAE;QACrBK,OAAO,CAACiB,KAAK,CAAC,mDAAmD,CAAC;QAClEpC,eAAe,CAAC,KAAK,CAAC;QACtB;MACF;;MAEA;MACA,MAAMqC,iBAAiB,GAAG,CAAC;MAC3BnC,cAAc,CAACmC,iBAAiB,CAAC,CAAC,CAAC;;MAEnC,MAAMC,UAAU,GAAG1B,cAAc,CAAC,IAAI,CAAC;MACvC,IAAI0B,UAAU,EAAE;QACd9C,eAAe,CAAC8C,UAAU,CAAC;QAC3Bf,cAAc,CAACc,iBAAiB,CAAC,CAAC,CAAC;QACnCrC,eAAe,CAAC,IAAI,CAAC;MACvB,CAAC,MAAM;QACHmB,OAAO,CAACiB,KAAK,CAAC,oDAAoD,CAAC;QACnEpC,eAAe,CAAC,KAAK,CAAC;MAC1B;IACF,CAAC,CAAC,CACDuC,KAAK,CAACH,KAAK,IAAI;MACdjB,OAAO,CAACiB,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAC5DpC,eAAe,CAAC,KAAK,CAAC;IACxB,CAAC,CAAC;IAEJ,OAAO,MAAM;MACXyB,aAAa,CAACtB,YAAY,CAACuB,OAAO,CAAC;MACnCD,aAAa,CAACrB,oBAAoB,CAACsB,OAAO,CAAC;IAC7C,CAAC;EACH,CAAC,EAAE,CAACd,cAAc,EAAEW,cAAc,CAAC,CAAC;;EAGpC;EACA7C,SAAS,CAAC,MAAM;IACd,IAAIqB,YAAY,IAAIN,YAAY,GAAG,CAAC,IAAI,CAACE,uBAAuB,EAAE;MAChEQ,YAAY,CAACuB,OAAO,GAAGc,WAAW,CAAC,MAAM;QACvC9C,eAAe,CAAC+C,QAAQ,IAAIA,QAAQ,GAAG,CAAC,CAAC;MAC3C,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,MAAM,IAAIhD,YAAY,KAAK,CAAC,IAAIM,YAAY,EAAE;MAC7C0B,aAAa,CAACtB,YAAY,CAACuB,OAAO,CAAC;MACnCP,OAAO,CAACS,GAAG,CAAC,gCAAgC,CAAC;MAC7C5B,eAAe,CAAC,KAAK,CAAC;MACtBJ,0BAA0B,CAAC,IAAI,CAAC;MAChCE,oBAAoB,CAAC,CAAC,CAAC;IACzB;IACA,OAAO,MAAM2B,aAAa,CAACtB,YAAY,CAACuB,OAAO,CAAC;EAClD,CAAC,EAAE,CAACjC,YAAY,EAAEM,YAAY,EAAEJ,uBAAuB,CAAC,CAAC;;EAEzD;EACAjB,SAAS,CAAC,MAAM;IACd,IAAIiB,uBAAuB,IAAIE,iBAAiB,GAAG,CAAC,EAAE;MACpDO,oBAAoB,CAACsB,OAAO,GAAGc,WAAW,CAAC,MAAM;QAC/C1C,oBAAoB,CAAC2C,QAAQ,IAAIA,QAAQ,GAAG,CAAC,CAAC;MAChD,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,MAAM,IAAI5C,iBAAiB,KAAK,CAAC,IAAIF,uBAAuB,EAAE;MAC7D8B,aAAa,CAACrB,oBAAoB,CAACsB,OAAO,CAAC;MAC3C9B,0BAA0B,CAAC,KAAK,CAAC;MACjCiC,mBAAmB,CAAC,CAAC,CAAC,CAAC;IACzB;IACA,OAAO,MAAMJ,aAAa,CAACrB,oBAAoB,CAACsB,OAAO,CAAC;EAC1D,CAAC,EAAE,CAAC/B,uBAAuB,EAAEE,iBAAiB,EAAEgC,mBAAmB,CAAC,CAAC;EAGrE,MAAMa,UAAU,GAAGA,CAAA,KAAM;IACvBjB,aAAa,CAACtB,YAAY,CAACuB,OAAO,CAAC;IACnC1B,eAAe,CAAC,KAAK,CAAC;IACtBJ,0BAA0B,CAAC,IAAI,CAAC;IAChCE,oBAAoB,CAAC,CAAC,CAAC;IACvB;IACA;EACF,CAAC;EAED,MAAM6C,cAAc,GAAGA,CAAA,KAAM;IAC3BlB,aAAa,CAACtB,YAAY,CAACuB,OAAO,CAAC;IACnCD,aAAa,CAACrB,oBAAoB,CAACsB,OAAO,CAAC;IAC3C1B,eAAe,CAAC,KAAK,CAAC;IACtB,IAAIb,UAAU,EAAE;MACdA,UAAU,CAAC,CAAC;IACd;EACF,CAAC;;EAED;EACA,MAAMyD,uBAAuB,GAAGvC,mBAAmB,CAACJ,WAAW,GAAG,CAAC,GAAGA,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC;EACxF,MAAM4C,kBAAkB,GAAIpD,YAAY,GAAGmD,uBAAuB,GAAI,GAAG;EAGzE,oBACE9D,OAAA;IAAKgE,SAAS,EAAC,uEAAuE;IAAAC,QAAA,gBACpFjE,OAAA;MACEkE,OAAO,EAAE7D,UAAW;MACpB2D,SAAS,EAAC,8EAA8E;MAAAC,QAAA,EACzF;IAED;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAETtE,OAAA;MAAIgE,SAAS,EAAC,uCAAuC;MAAAC,QAAA,EAAC;IAAQ;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnEtE,OAAA;MAAGgE,SAAS,EAAC,4BAA4B;MAAAC,QAAA,GAAC,SAAO,EAAC9C,WAAW;IAAA;MAAAgD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAGlEtE,OAAA;MAAKgE,SAAS,EAAC,2DAA2D;MAAAC,QAAA,eACxEjE,OAAA;QACEgE,SAAS,EAAC,yEAAyE;QACnFO,KAAK,EAAE;UAAEC,KAAK,EAAE,GAAGT,kBAAkB;QAAI;MAAE;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC,eACNtE,OAAA;MAAKgE,SAAS,EAAC,wCAAwC;MAAAC,QAAA,GAAC,mBAAiB,EAACtD,YAAY,EAAC,GAAC;IAAA;MAAAwD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EAE7FzD,uBAAuB,gBACtBb,OAAA;MAAKgE,SAAS,EAAC,OAAO;MAAAC,QAAA,gBACpBjE,OAAA;QAAGgE,SAAS,EAAC,wCAAwC;QAAAC,QAAA,EAAC;MAAmB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAC7EtE,OAAA;QAAGgE,SAAS,EAAC,wBAAwB;QAAAC,QAAA,GAAC,qBAAmB,EAAClD,iBAAiB,EAAC,GAAC;MAAA;QAAAoD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9E,CAAC,GAEN7D,YAAY,gBACVT,OAAA,CAAAE,SAAA;MAAA+D,QAAA,gBACEjE,OAAA;QAAKgE,SAAS,EAAC,4CAA4C;QAAAC,QAAA,GAAC,IACzD,EAACxD,YAAY,CAAC2B,MAAM,EAAC,IACxB;MAAA;QAAA+B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACNtE,OAAA;QAAKgE,SAAS,EAAC,0BAA0B;QAAAC,QAAA,eAEvCjE,OAAA;UACEyE,GAAG,EAAEhE,YAAY,CAACiE,UAAW;UAC7BC,GAAG,EAAElE,YAAY,CAAC2B,MAAO;UACzB4B,SAAS,EAAC;QAA8C;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACzD;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eAENtE,OAAA;QAAKgE,SAAS,EAAC,oCAAoC;QAAAC,QAAA,gBACjDjE,OAAA;UACEkE,OAAO,EAAEN,UAAW;UACpBI,SAAS,EAAC,2GAA2G;UAAAC,QAAA,EACtH;QAED;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACTtE,OAAA;UACEkE,OAAO,EAAEL,cAAe;UACxBG,SAAS,EAAC,uGAAuG;UAAAC,QAAA,EAClH;QAED;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAAA,eACN,CAAC,gBAEHtE,OAAA;MAAKgE,SAAS,EAAC,4BAA4B;MAAAC,QAAA,EAAC;IAA2B;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAE/E;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAChE,EAAA,CAtOQH,UAAU;AAAAyE,EAAA,GAAVzE,UAAU;AAwOnB,eAAeA,UAAU;AAAC,IAAAyE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}