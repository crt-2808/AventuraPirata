{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ramos\\\\Downloads\\\\project\\\\src\\\\components\\\\PictionaryGame.js\",\n  _s = $RefreshSig$();\n// src/components/PictionaryGame.js\n\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction PictionaryGame({\n  players,\n  allowedDifficulties,\n  onExitGame\n}) {\n  _s();\n  var _currentElement$pista;\n  const [initialGameData, setInitialGameData] = useState([]); // Todos los objetos seleccionados al inicio\n  const [activeGameQueue, setActiveGameQueue] = useState([]); // Cola de objetos aún por jugar\n  const [currentQueueIndex, setCurrentQueueIndex] = useState(0); // Índice del objeto actual en la cola activa\n  const [elementsCompleted, setElementsCompleted] = useState(0); // Contador de objetos COMPLETADOS (adivinados o tiempo agotado)\n\n  const [currentPistaIndex, setCurrentPistaIndex] = useState(0);\n  const [showHintPopup, setShowHintPopup] = useState(false);\n  const [showChangePlayerMessage, setShowChangePlayerMessage] = useState(false);\n  const [changePlayerTimer, setChangePlayerTimer] = useState(0);\n  const [hintTimer, setHintTimer] = useState(0);\n  const [isGameActive, setIsGameActive] = useState(false);\n  const [guessTimeLeft, setGuessTimeLeft] = useState(45);\n  const changePlayerTimerRef = useRef(null);\n  const hintTimerRef = useRef(null);\n  const guessTimerRef = useRef(null);\n\n  // useCallback para funciones que no cambian a menudo y son dependencias en useEffect\n  const startGuessTimer = useCallback(() => {\n    clearInterval(guessTimerRef.current);\n    setGuessTimeLeft(45); // Reinicia a 45 segundos\n    setIsGameActive(true); // Asegura que el juego esté activo para el temporizador\n  }, []);\n  const handleNextElementLogic = useCallback(() => {\n    clearInterval(guessTimerRef.current); // Detiene el temporizador de adivinanza actual\n\n    const nextQueueIndex = currentQueueIndex + 1;\n    if (nextQueueIndex < activeGameQueue.length) {\n      // Si hay más objetos en la cola, pasa al siguiente de la cola\n      setCurrentQueueIndex(nextQueueIndex);\n      setCurrentPistaIndex(0); // Reinicia el índice de pista para el nuevo elemento\n      setElementsCompleted(prev => prev + 1); // Incrementa el contador de elementos completados\n      startGuessTimer(); // Inicia el temporizador para el nuevo elemento\n      setIsGameActive(true); // Reactiva el juego\n    } else {\n      // Si no hay más objetos en la cola (todos fueron adivinados/pasados definitivamente)\n      console.log(\"¡Juego de Pictionary Terminado!\");\n      setIsGameActive(false);\n      clearInterval(guessTimerRef.current);\n      if (onExitGame) {\n        onExitGame();\n      }\n    }\n  }, [currentQueueIndex, activeGameQueue, onExitGame, startGuessTimer]);\n\n  // Carga y mezcla los datos del juego al inicio\n  useEffect(() => {\n    const pictionaryData = require('../mock/pictionary_data.json');\n    const filteredData = pictionaryData.filter(item => item.Dificultad && allowedDifficulties.includes(item.Dificultad));\n    const mappedData = filteredData.map(item => ({\n      elemento: item.Elemento,\n      pistas: item.Pistas_Pictionary,\n      dificultad: item.Dificultad\n    }));\n    const selectedElements = [];\n    if (mappedData.length > 0) {\n      const shuffledData = [...mappedData].sort(() => 0.5 - Math.random());\n      for (let i = 0; i < 5 && i < shuffledData.length; i++) {\n        selectedElements.push(shuffledData[i]);\n      }\n    }\n    setInitialGameData(selectedElements); // Guarda los 5 objetos iniciales\n    setActiveGameQueue([...selectedElements]); // La cola de juego inicial es la misma\n    setCurrentQueueIndex(0);\n    setElementsCompleted(0); // Reinicia el contador de completados\n    setCurrentPistaIndex(0);\n    setIsGameActive(true);\n    setShowHintPopup(false);\n    setShowChangePlayerMessage(false);\n    setChangePlayerTimer(0);\n    setHintTimer(0);\n    startGuessTimer(); // Inicia el temporizador de adivinanza al cargar el juego\n\n    // Limpieza de temporizadores al desmontar el componente\n    return () => {\n      clearInterval(changePlayerTimerRef.current);\n      clearInterval(hintTimerRef.current);\n      clearInterval(guessTimerRef.current);\n    };\n  }, [allowedDifficulties, startGuessTimer]); // Añade startGuessTimer como dependencia\n\n  // --- Lógica del Pop-up de Pistas ---\n  useEffect(() => {\n    if (showHintPopup && hintTimer > 0) {\n      hintTimerRef.current = setInterval(() => {\n        setHintTimer(prevTime => prevTime - 1);\n      }, 1000);\n    } else if (hintTimer === 0 && showHintPopup) {\n      clearInterval(hintTimerRef.current);\n      setShowHintPopup(false); // Cierra el pop-up cuando el tiempo se agota\n      if (isGameActive && !showChangePlayerMessage) {\n        // Reanuda si el juego principal sigue activo\n        startGuessTimer();\n      }\n    }\n    return () => clearInterval(hintTimerRef.current);\n  }, [showHintPopup, hintTimer, isGameActive, showChangePlayerMessage, startGuessTimer]); // Agrega startGuessTimer\n\n  // --- Lógica del Temporizador de Cambio de Jugador ---\n  useEffect(() => {\n    if (showChangePlayerMessage && changePlayerTimer > 0) {\n      changePlayerTimerRef.current = setInterval(() => {\n        setChangePlayerTimer(prevTime => prevTime - 1);\n      }, 1000);\n    } else if (changePlayerTimer === 0 && showChangePlayerMessage) {\n      clearInterval(changePlayerTimerRef.current);\n      setShowChangePlayerMessage(false); // Oculta el mensaje\n      handleNextElementLogic(); // Pasa al siguiente elemento después del temporizador\n    }\n    return () => clearInterval(changePlayerTimerRef.current);\n  }, [showChangePlayerMessage, changePlayerTimer, handleNextElementLogic]);\n\n  // --- Lógica del Temporizador Principal de Adivinanza (45 segundos) ---\n  useEffect(() => {\n    if (isGameActive && guessTimeLeft > 0 && !showHintPopup && !showChangePlayerMessage) {\n      guessTimerRef.current = setInterval(() => {\n        setGuessTimeLeft(prevTime => prevTime - 1);\n      }, 1000);\n    } else if (guessTimeLeft === 0 && isGameActive) {\n      clearInterval(guessTimerRef.current);\n      console.log(\"¡Tiempo agotado para adivinar!\");\n      // Mueve el objeto actual al final de la cola y pasa al siguiente\n      handlePassElement(false); // False para no mostrar el mensaje de \"cambio de jugador\"\n    }\n    return () => clearInterval(guessTimerRef.current);\n  }, [guessTimeLeft, isGameActive, showHintPopup, showChangePlayerMessage]);\n  const handleShowHint = () => {\n    const currentElement = activeGameQueue[currentQueueIndex];\n    if (currentElement && currentElement.pistas) {\n      clearInterval(guessTimerRef.current); // Pausa el temporizador de adivinanza\n\n      const nextPistaIndex = (currentPistaIndex + 1) % currentElement.pistas.length;\n      setCurrentPistaIndex(nextPistaIndex); // Avanza o cicla la pista\n\n      setShowHintPopup(true);\n      setHintTimer(3); // 3 segundos para el pop-up\n    }\n  };\n  const handleAdivine = () => {\n    clearInterval(guessTimerRef.current); // Detiene el temporizador de adivinanza\n    setIsGameActive(false); // Pausa el juego principal\n    setShowChangePlayerMessage(true);\n    setChangePlayerTimer(7); // 7 segundos para el mensaje de cambio de jugador\n\n    // Aquí el objeto se considera \"completo\"\n    setElementsCompleted(prev => prev + 1); // Incrementa el contador de objetos completados\n\n    // Removemos el objeto adivinado de la cola activa para que no vuelva a aparecer\n    setActiveGameQueue(prevQueue => prevQueue.filter((_, idx) => idx !== currentQueueIndex));\n    // Resetear currentQueueIndex para que el handleNextElementLogic tome el primer elemento de la nueva cola\n    setCurrentQueueIndex(0); // Importante para que tome el primer de la nueva queue\n  };\n\n  // Nueva función para el botón \"Paso\" y cuando el tiempo se agota\n  const handlePassElement = (showChangeMessage = true) => {\n    clearInterval(guessTimerRef.current); // Detiene el temporizador de adivinanza\n    setIsGameActive(false); // Pausa el juego\n\n    const currentElement = activeGameQueue[currentQueueIndex];\n    if (currentElement) {\n      setActiveGameQueue(prevQueue => {\n        // Mueve el elemento actual al final de la cola\n        const updatedQueue = prevQueue.filter((_, idx) => idx !== currentQueueIndex);\n        updatedQueue.push(currentElement); // Lo pone al final\n        return updatedQueue;\n      });\n      // currentQueueIndex se mantiene igual para que el handleNextElementLogic tome el \"siguiente\" de la cola\n      // que ahora será el que estaba en la posición 1 si la queue no se vació\n    }\n    if (showChangeMessage) {\n      // Si se llama desde el botón \"Paso\"\n      setShowChangePlayerMessage(true);\n      setChangePlayerTimer(7); // Da 7 segundos para el cambio de jugador\n    } else {\n      // Si se llama por tiempo agotado\n      // Pasa al siguiente elemento directamente después de un breve momento\n      // sin mostrar el mensaje de cambio de jugador\n      setTimeout(() => {\n        handleNextElementLogic();\n      }, 1000); // Pequeña pausa antes de pasar al siguiente\n    }\n  };\n\n  // Verifica si ya se cargaron los datos iniciales o si no hay elementos\n  if (initialGameData.length === 0 && !isGameActive) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-md mx-auto mt-8 bg-white p-6 rounded-lg shadow-md text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-bold mb-4 text-gray-800\",\n        children: \"Cargando juego Pictionary...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-600\",\n        children: \"Aseg\\xFArate de que hay datos de Pictionary para las dificultades seleccionadas.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onExitGame,\n        className: \"mt-4 bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded\",\n        children: \"Salir del Juego\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Si no hay más elementos en la cola activa, el juego ha terminado\n  if (activeGameQueue.length === 0 && elementsCompleted > 0 && !isGameActive && !showChangePlayerMessage) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-md mx-auto mt-8 bg-white p-6 rounded-lg shadow-md text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-bold mb-4 text-gray-800\",\n        children: \"\\xA1Juego de Pictionary Terminado!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-600\",\n        children: \"Gracias por jugar. \\xA1Vuelve pronto!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onExitGame,\n        className: \"mt-4 bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded\",\n        children: \"Volver al Selector de Juego\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this);\n  }\n  const currentElement = activeGameQueue[currentQueueIndex];\n  // Asegurarse de que currentPistaIndex sea válido antes de intentar acceder a la pista\n  const currentPista = currentElement === null || currentElement === void 0 ? void 0 : (_currentElement$pista = currentElement.pistas) === null || _currentElement$pista === void 0 ? void 0 : _currentElement$pista[currentPistaIndex];\n  const progressPercentage = guessTimeLeft / 45 * 100; // Progreso basado en 45 segundos\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container bg-white p-6 rounded-lg shadow-md text-center relative\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onExitGame,\n      className: \"absolute top-4 left-4 bg-gray-200 hover:bg-gray-300 p-2 rounded-full text-xl\",\n      children: \"\\u2190\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4 text-gray-800\",\n      children: \"\\xA1Pictionary!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-lg text-gray-700 mb-4\",\n      children: [\"Elemento \", elementsCompleted + 1, \" de \", initialGameData.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full bg-gray-200 rounded-full h-4 dark:bg-gray-700 mb-6\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-red-500 h-4 rounded-full transition-all duration-1000 ease-linear\",\n        style: {\n          width: `${progressPercentage}%`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-xl font-bold mb-8 text-red-500\",\n      children: [\"Tiempo restante: \", guessTimeLeft, \"s\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 7\n    }, this), showChangePlayerMessage ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"my-10\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-green-600 text-5xl font-bold mb-4\",\n        children: \"\\xA1Cambia de Jugador!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-700 text-3xl\",\n        children: [\"Siguiente elemento en \", changePlayerTimer, \"s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 9\n    }, this) :\n    /*#__PURE__*/\n    // --- Muestra el Elemento principal del juego ---\n    _jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-5xl font-extrabold text-purple-700 my-8\",\n        children: [\"\\\"\", currentElement === null || currentElement === void 0 ? void 0 : currentElement.elemento, \"\\\"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-center space-x-4 mt-8\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleAdivine,\n          className: \"bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-lg text-lg transition duration-300\",\n          children: \"\\xA1Adivin\\xE9!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleShowHint,\n          className: \"bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg text-lg transition duration-300\",\n          children: \"Pista\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePassElement(true) // Llama con 'true' para mostrar el mensaje de cambio\n          ,\n          className: \"bg-gray-500 hover:bg-gray-600 text-white font-bold py-3 px-6 rounded-lg text-lg transition duration-300\",\n          children: \"Paso\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), showHintPopup && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-8 rounded-lg shadow-xl text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-3xl font-bold text-gray-800 mb-4\",\n          children: \"Pista:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-blue-600 text-4xl font-extrabold mb-6\",\n          children: [\"\\\"\", currentPista, \"\\\"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-500 text-lg\",\n          children: [\"Cerrando en \", hintTimer, \"s...\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 237,\n    columnNumber: 5\n  }, this);\n}\n_s(PictionaryGame, \"j/zrSP/27QKitkdPrUuAlFk0y/o=\");\n_c = PictionaryGame;\nexport default PictionaryGame;\nvar _c;\n$RefreshReg$(_c, \"PictionaryGame\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","jsxDEV","_jsxDEV","Fragment","_Fragment","PictionaryGame","players","allowedDifficulties","onExitGame","_s","_currentElement$pista","initialGameData","setInitialGameData","activeGameQueue","setActiveGameQueue","currentQueueIndex","setCurrentQueueIndex","elementsCompleted","setElementsCompleted","currentPistaIndex","setCurrentPistaIndex","showHintPopup","setShowHintPopup","showChangePlayerMessage","setShowChangePlayerMessage","changePlayerTimer","setChangePlayerTimer","hintTimer","setHintTimer","isGameActive","setIsGameActive","guessTimeLeft","setGuessTimeLeft","changePlayerTimerRef","hintTimerRef","guessTimerRef","startGuessTimer","clearInterval","current","handleNextElementLogic","nextQueueIndex","length","prev","console","log","pictionaryData","require","filteredData","filter","item","Dificultad","includes","mappedData","map","elemento","Elemento","pistas","Pistas_Pictionary","dificultad","selectedElements","shuffledData","sort","Math","random","i","push","setInterval","prevTime","handlePassElement","handleShowHint","currentElement","nextPistaIndex","handleAdivine","prevQueue","_","idx","showChangeMessage","updatedQueue","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","currentPista","progressPercentage","style","width","_c","$RefreshReg$"],"sources":["C:/Users/ramos/Downloads/project/src/components/PictionaryGame.js"],"sourcesContent":["// src/components/PictionaryGame.js\r\n\r\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\r\n\r\nfunction PictionaryGame({ players, allowedDifficulties, onExitGame }) {\r\n  const [initialGameData, setInitialGameData] = useState([]); // Todos los objetos seleccionados al inicio\r\n  const [activeGameQueue, setActiveGameQueue] = useState([]); // Cola de objetos aún por jugar\r\n  const [currentQueueIndex, setCurrentQueueIndex] = useState(0); // Índice del objeto actual en la cola activa\r\n  const [elementsCompleted, setElementsCompleted] = useState(0); // Contador de objetos COMPLETADOS (adivinados o tiempo agotado)\r\n\r\n  const [currentPistaIndex, setCurrentPistaIndex] = useState(0);\r\n  const [showHintPopup, setShowHintPopup] = useState(false);\r\n  const [showChangePlayerMessage, setShowChangePlayerMessage] = useState(false);\r\n  const [changePlayerTimer, setChangePlayerTimer] = useState(0);\r\n  const [hintTimer, setHintTimer] = useState(0);\r\n  const [isGameActive, setIsGameActive] = useState(false);\r\n  const [guessTimeLeft, setGuessTimeLeft] = useState(45);\r\n\r\n  const changePlayerTimerRef = useRef(null);\r\n  const hintTimerRef = useRef(null);\r\n  const guessTimerRef = useRef(null);\r\n\r\n\r\n  // useCallback para funciones que no cambian a menudo y son dependencias en useEffect\r\n  const startGuessTimer = useCallback(() => {\r\n    clearInterval(guessTimerRef.current);\r\n    setGuessTimeLeft(45); // Reinicia a 45 segundos\r\n    setIsGameActive(true); // Asegura que el juego esté activo para el temporizador\r\n  }, []);\r\n\r\n  const handleNextElementLogic = useCallback(() => {\r\n    clearInterval(guessTimerRef.current); // Detiene el temporizador de adivinanza actual\r\n\r\n    const nextQueueIndex = currentQueueIndex + 1;\r\n\r\n    if (nextQueueIndex < activeGameQueue.length) {\r\n      // Si hay más objetos en la cola, pasa al siguiente de la cola\r\n      setCurrentQueueIndex(nextQueueIndex);\r\n      setCurrentPistaIndex(0); // Reinicia el índice de pista para el nuevo elemento\r\n      setElementsCompleted(prev => prev + 1); // Incrementa el contador de elementos completados\r\n      startGuessTimer(); // Inicia el temporizador para el nuevo elemento\r\n      setIsGameActive(true); // Reactiva el juego\r\n    } else {\r\n      // Si no hay más objetos en la cola (todos fueron adivinados/pasados definitivamente)\r\n      console.log(\"¡Juego de Pictionary Terminado!\");\r\n      setIsGameActive(false);\r\n      clearInterval(guessTimerRef.current);\r\n      if (onExitGame) {\r\n        onExitGame();\r\n      }\r\n    }\r\n  }, [currentQueueIndex, activeGameQueue, onExitGame, startGuessTimer]);\r\n\r\n\r\n  // Carga y mezcla los datos del juego al inicio\r\n  useEffect(() => {\r\n    const pictionaryData = require('../mock/pictionary_data.json');\r\n\r\n    const filteredData = pictionaryData.filter(item =>\r\n      item.Dificultad && allowedDifficulties.includes(item.Dificultad)\r\n    );\r\n\r\n    const mappedData = filteredData.map(item => ({\r\n      elemento: item.Elemento,\r\n      pistas: item.Pistas_Pictionary,\r\n      dificultad: item.Dificultad\r\n    }));\r\n\r\n    const selectedElements = [];\r\n    if (mappedData.length > 0) {\r\n      const shuffledData = [...mappedData].sort(() => 0.5 - Math.random());\r\n      for (let i = 0; i < 5 && i < shuffledData.length; i++) {\r\n        selectedElements.push(shuffledData[i]);\r\n      }\r\n    }\r\n    setInitialGameData(selectedElements); // Guarda los 5 objetos iniciales\r\n    setActiveGameQueue([...selectedElements]); // La cola de juego inicial es la misma\r\n    setCurrentQueueIndex(0);\r\n    setElementsCompleted(0); // Reinicia el contador de completados\r\n    setCurrentPistaIndex(0);\r\n    setIsGameActive(true);\r\n    setShowHintPopup(false);\r\n    setShowChangePlayerMessage(false);\r\n    setChangePlayerTimer(0);\r\n    setHintTimer(0);\r\n    startGuessTimer(); // Inicia el temporizador de adivinanza al cargar el juego\r\n\r\n\r\n    // Limpieza de temporizadores al desmontar el componente\r\n    return () => {\r\n      clearInterval(changePlayerTimerRef.current);\r\n      clearInterval(hintTimerRef.current);\r\n      clearInterval(guessTimerRef.current);\r\n    };\r\n  }, [allowedDifficulties, startGuessTimer]); // Añade startGuessTimer como dependencia\r\n\r\n  // --- Lógica del Pop-up de Pistas ---\r\n  useEffect(() => {\r\n    if (showHintPopup && hintTimer > 0) {\r\n      hintTimerRef.current = setInterval(() => {\r\n        setHintTimer(prevTime => prevTime - 1);\r\n      }, 1000);\r\n    } else if (hintTimer === 0 && showHintPopup) {\r\n      clearInterval(hintTimerRef.current);\r\n      setShowHintPopup(false); // Cierra el pop-up cuando el tiempo se agota\r\n      if (isGameActive && !showChangePlayerMessage) { // Reanuda si el juego principal sigue activo\r\n          startGuessTimer();\r\n      }\r\n    }\r\n    return () => clearInterval(hintTimerRef.current);\r\n  }, [showHintPopup, hintTimer, isGameActive, showChangePlayerMessage, startGuessTimer]); // Agrega startGuessTimer\r\n\r\n  // --- Lógica del Temporizador de Cambio de Jugador ---\r\n  useEffect(() => {\r\n    if (showChangePlayerMessage && changePlayerTimer > 0) {\r\n      changePlayerTimerRef.current = setInterval(() => {\r\n        setChangePlayerTimer(prevTime => prevTime - 1);\r\n      }, 1000);\r\n    } else if (changePlayerTimer === 0 && showChangePlayerMessage) {\r\n      clearInterval(changePlayerTimerRef.current);\r\n      setShowChangePlayerMessage(false); // Oculta el mensaje\r\n      handleNextElementLogic(); // Pasa al siguiente elemento después del temporizador\r\n    }\r\n    return () => clearInterval(changePlayerTimerRef.current);\r\n  }, [showChangePlayerMessage, changePlayerTimer, handleNextElementLogic]);\r\n\r\n\r\n  // --- Lógica del Temporizador Principal de Adivinanza (45 segundos) ---\r\n  useEffect(() => {\r\n    if (isGameActive && guessTimeLeft > 0 && !showHintPopup && !showChangePlayerMessage) {\r\n      guessTimerRef.current = setInterval(() => {\r\n        setGuessTimeLeft(prevTime => prevTime - 1);\r\n      }, 1000);\r\n    } else if (guessTimeLeft === 0 && isGameActive) {\r\n      clearInterval(guessTimerRef.current);\r\n      console.log(\"¡Tiempo agotado para adivinar!\");\r\n      // Mueve el objeto actual al final de la cola y pasa al siguiente\r\n      handlePassElement(false); // False para no mostrar el mensaje de \"cambio de jugador\"\r\n    }\r\n    return () => clearInterval(guessTimerRef.current);\r\n  }, [guessTimeLeft, isGameActive, showHintPopup, showChangePlayerMessage]);\r\n\r\n\r\n  const handleShowHint = () => {\r\n    const currentElement = activeGameQueue[currentQueueIndex];\r\n    if (currentElement && currentElement.pistas) {\r\n      clearInterval(guessTimerRef.current); // Pausa el temporizador de adivinanza\r\n      \r\n      const nextPistaIndex = (currentPistaIndex + 1) % currentElement.pistas.length;\r\n      setCurrentPistaIndex(nextPistaIndex); // Avanza o cicla la pista\r\n\r\n      setShowHintPopup(true);\r\n      setHintTimer(3); // 3 segundos para el pop-up\r\n    }\r\n  };\r\n\r\n  const handleAdivine = () => {\r\n    clearInterval(guessTimerRef.current); // Detiene el temporizador de adivinanza\r\n    setIsGameActive(false); // Pausa el juego principal\r\n    setShowChangePlayerMessage(true);\r\n    setChangePlayerTimer(7); // 7 segundos para el mensaje de cambio de jugador\r\n    \r\n    // Aquí el objeto se considera \"completo\"\r\n    setElementsCompleted(prev => prev + 1); // Incrementa el contador de objetos completados\r\n\r\n    // Removemos el objeto adivinado de la cola activa para que no vuelva a aparecer\r\n    setActiveGameQueue(prevQueue => prevQueue.filter((_, idx) => idx !== currentQueueIndex));\r\n    // Resetear currentQueueIndex para que el handleNextElementLogic tome el primer elemento de la nueva cola\r\n    setCurrentQueueIndex(0); // Importante para que tome el primer de la nueva queue\r\n  };\r\n\r\n  // Nueva función para el botón \"Paso\" y cuando el tiempo se agota\r\n  const handlePassElement = (showChangeMessage = true) => {\r\n    clearInterval(guessTimerRef.current); // Detiene el temporizador de adivinanza\r\n    setIsGameActive(false); // Pausa el juego\r\n\r\n    const currentElement = activeGameQueue[currentQueueIndex];\r\n\r\n    if (currentElement) {\r\n        setActiveGameQueue(prevQueue => {\r\n            // Mueve el elemento actual al final de la cola\r\n            const updatedQueue = prevQueue.filter((_, idx) => idx !== currentQueueIndex);\r\n            updatedQueue.push(currentElement); // Lo pone al final\r\n            return updatedQueue;\r\n        });\r\n        // currentQueueIndex se mantiene igual para que el handleNextElementLogic tome el \"siguiente\" de la cola\r\n        // que ahora será el que estaba en la posición 1 si la queue no se vació\r\n    }\r\n    \r\n    if (showChangeMessage) { // Si se llama desde el botón \"Paso\"\r\n      setShowChangePlayerMessage(true);\r\n      setChangePlayerTimer(7); // Da 7 segundos para el cambio de jugador\r\n    } else { // Si se llama por tiempo agotado\r\n      // Pasa al siguiente elemento directamente después de un breve momento\r\n      // sin mostrar el mensaje de cambio de jugador\r\n      setTimeout(() => {\r\n        handleNextElementLogic();\r\n      }, 1000); // Pequeña pausa antes de pasar al siguiente\r\n    }\r\n  };\r\n\r\n\r\n  // Verifica si ya se cargaron los datos iniciales o si no hay elementos\r\n  if (initialGameData.length === 0 && !isGameActive) {\r\n    return (\r\n      <div className=\"max-w-md mx-auto mt-8 bg-white p-6 rounded-lg shadow-md text-center\">\r\n        <h2 className=\"text-2xl font-bold mb-4 text-gray-800\">Cargando juego Pictionary...</h2>\r\n        <p className=\"text-gray-600\">Asegúrate de que hay datos de Pictionary para las dificultades seleccionadas.</p>\r\n        <button onClick={onExitGame} className=\"mt-4 bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded\">\r\n          Salir del Juego\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Si no hay más elementos en la cola activa, el juego ha terminado\r\n  if (activeGameQueue.length === 0 && elementsCompleted > 0 && !isGameActive && !showChangePlayerMessage) {\r\n    return (\r\n      <div className=\"max-w-md mx-auto mt-8 bg-white p-6 rounded-lg shadow-md text-center\">\r\n        <h2 className=\"text-2xl font-bold mb-4 text-gray-800\">¡Juego de Pictionary Terminado!</h2>\r\n        <p className=\"text-gray-600\">Gracias por jugar. ¡Vuelve pronto!</p>\r\n        <button onClick={onExitGame} className=\"mt-4 bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded\">\r\n          Volver al Selector de Juego\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const currentElement = activeGameQueue[currentQueueIndex];\r\n  // Asegurarse de que currentPistaIndex sea válido antes de intentar acceder a la pista\r\n  const currentPista = currentElement?.pistas?.[currentPistaIndex];\r\n\r\n\r\n  const progressPercentage = (guessTimeLeft / 45) * 100; // Progreso basado en 45 segundos\r\n\r\n  return (\r\n    <div className=\"game-container bg-white p-6 rounded-lg shadow-md text-center relative\">\r\n      <button\r\n        onClick={onExitGame}\r\n        className=\"absolute top-4 left-4 bg-gray-200 hover:bg-gray-300 p-2 rounded-full text-xl\"\r\n      >\r\n        &#8592;\r\n      </button>\r\n\r\n      <h2 className=\"text-2xl font-bold mb-4 text-gray-800\">¡Pictionary!</h2>\r\n\r\n      {/* El contador ahora usa elementsCompleted */}\r\n      <p className=\"text-lg text-gray-700 mb-4\">Elemento {elementsCompleted + 1} de {initialGameData.length}</p>\r\n\r\n      {/* Barra de progreso del tiempo de adivinanza */}\r\n      <div className=\"w-full bg-gray-200 rounded-full h-4 dark:bg-gray-700 mb-6\">\r\n        <div\r\n          className=\"bg-red-500 h-4 rounded-full transition-all duration-1000 ease-linear\"\r\n          style={{ width: `${progressPercentage}%` }}\r\n        ></div>\r\n      </div>\r\n      <div className=\"text-xl font-bold mb-8 text-red-500\">Tiempo restante: {guessTimeLeft}s</div>\r\n\r\n\r\n      {/* --- Mensaje de Cambio de Jugador (se muestra cuando showChangePlayerMessage es true) --- */}\r\n      {showChangePlayerMessage ? (\r\n        <div className=\"my-10\">\r\n          <p className=\"text-green-600 text-5xl font-bold mb-4\">¡Cambia de Jugador!</p>\r\n          <p className=\"text-gray-700 text-3xl\">Siguiente elemento en {changePlayerTimer}s</p>\r\n        </div>\r\n      ) : (\r\n        // --- Muestra el Elemento principal del juego ---\r\n        <>\r\n          <div className=\"text-5xl font-extrabold text-purple-700 my-8\">\r\n            \"{currentElement?.elemento}\"\r\n          </div>\r\n\r\n          <div className=\"flex justify-center space-x-4 mt-8\">\r\n            <button\r\n              onClick={handleAdivine}\r\n              className=\"bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-lg text-lg transition duration-300\"\r\n            >\r\n              ¡Adiviné!\r\n            </button>\r\n            <button\r\n              onClick={handleShowHint}\r\n              className=\"bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg text-lg transition duration-300\"\r\n            >\r\n              Pista\r\n            </button>\r\n            {/* Nuevo botón \"Paso\" */}\r\n            <button\r\n              onClick={() => handlePassElement(true)} // Llama con 'true' para mostrar el mensaje de cambio\r\n              className=\"bg-gray-500 hover:bg-gray-600 text-white font-bold py-3 px-6 rounded-lg text-lg transition duration-300\"\r\n            >\r\n              Paso\r\n            </button>\r\n          </div>\r\n        </>\r\n      )}\r\n\r\n      {/* --- Pop-up de Pistas (se muestra cuando showHintPopup es true) --- */}\r\n      {showHintPopup && (\r\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\r\n          <div className=\"bg-white p-8 rounded-lg shadow-xl text-center\">\r\n            <h3 className=\"text-3xl font-bold text-gray-800 mb-4\">Pista:</h3>\r\n            <p className=\"text-blue-600 text-4xl font-extrabold mb-6\">\"{currentPista}\"</p>\r\n            <p className=\"text-gray-500 text-lg\">Cerrando en {hintTimer}s...</p>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PictionaryGame;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}