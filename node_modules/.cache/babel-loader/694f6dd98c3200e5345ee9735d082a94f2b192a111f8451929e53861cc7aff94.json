{"ast":null,"code":"// src/components/TetrisGame.js\nimport React,{useState,useEffect,useRef,useCallback}from'react';// Si moviste las imágenes a `public` y ajustaste el JSON, esta función no es necesaria.\n// Si aún usas `require()`, mantén la versión de la solución anterior.\nimport{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";function TetrisGame(_ref){let{players,onExitGame}=_ref;// turnTimeLeft será el tiempo restante en el turno actual\n// turnCounter rastrea el número de turnos completados\nconst[tetrisPieces,setTetrisPieces]=useState([]);const[currentPiece,setCurrentPiece]=useState(null);const[turnTimeLeft,setTurnTimeLeft]=useState(10);// Tiempo restante en el turno actual\nconst[showChangePlayerMessage,setShowChangePlayerMessage]=useState(false);const[changePlayerTimer,setChangePlayerTimer]=useState(3);const[isGameActive,setIsGameActive]=useState(false);const[turnCounter,setTurnCounter]=useState(0);// Inicia en 0, se incrementa antes de cada turno.\nconst turnTimerRef=useRef(null);const changePlayerTimerRef=useRef(null);// Función para calcular el tiempo base del turno según el contador\nconst getBaseTurnDuration=useCallback(currentTurn=>{let baseTime=10;// Tiempo inicial base\n// Cada 5 turnos (después del turno 5, 10, 15, etc.), reduce el tiempo en 1 segundo\n// Math.floor((currentTurn - 1) / 5) para que empiece a bajar *después* del turno 5\n// (ej. turno 6 -> 1, turno 11 -> 2)\nconst reduction=Math.floor((currentTurn-1)/5);// Asegúrate de que el tiempo mínimo no sea negativo o cero si no es lo que quieres\nreturn Math.max(1,baseTime-reduction);// Mínimo de 1 segundo\n},[]);const getRandomPiece=useCallback(function(){let excludeFirstITetromino=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;if(tetrisPieces.length===0)return null;let availablePieces=[...tetrisPieces];if(excludeFirstITetromino){availablePieces=availablePieces.filter(piece=>piece.nombre!==\"Tetris_Oco_I\");if(availablePieces.length===0){console.warn(\"No hay piezas disponibles después de excluir 'Tetris_Oco_I'.\");return null;}}const randomIndex=Math.floor(Math.random()*availablePieces.length);return availablePieces[randomIndex];},[tetrisPieces]);const startTurnTimer=useCallback(turnNumber=>{clearInterval(turnTimerRef.current);const duration=getBaseTurnDuration(turnNumber);// <--- Usa la nueva función\nsetTurnTimeLeft(duration);setIsGameActive(true);console.log(\"Turno #\".concat(turnNumber,\". Duraci\\xF3n del turno: \").concat(duration,\"s\"));// Para depuración\n},[getBaseTurnDuration]);// Dependencia agregada\nconst handleNextTurnLogic=useCallback(()=>{clearInterval(turnTimerRef.current);const nextTurnNumber=turnCounter+1;// Calculamos el número del siguiente turno\nsetTurnCounter(nextTurnNumber);// Actualizamos el contador de turnos\nconst nextPiece=getRandomPiece(false);if(nextPiece){setCurrentPiece(nextPiece);startTurnTimer(nextTurnNumber);// Pasa el número de turno a startTurnTimer\nsetIsGameActive(true);}else{console.log(\"No hay más piezas para jugar. Juego terminado.\");setIsGameActive(false);if(onExitGame){onExitGame();}}},[turnCounter,getRandomPiece,onExitGame,startTurnTimer]);// Dependencia agregada `turnCounter`\nuseEffect(()=>{import('../mock/tetris_data.json').then(module=>{const data=module.default;setTetrisPieces(data);if(data.length===0){console.error(\"tetris_data.json está vacío o no contiene piezas.\");setIsGameActive(false);return;}// Iniciar el juego con el primer turno\nconst initialTurnNumber=1;setTurnCounter(initialTurnNumber);// Establece el turno inicial a 1\nconst firstPiece=getRandomPiece(true);if(firstPiece){setCurrentPiece(firstPiece);startTurnTimer(initialTurnNumber);// Pasa el número de turno\nsetIsGameActive(true);}else{console.error(\"No se pudo seleccionar la primera pieza de Tetris.\");setIsGameActive(false);}}).catch(error=>{console.error(\"Error al cargar los datos de Tetris:\",error);setIsGameActive(false);});return()=>{clearInterval(turnTimerRef.current);clearInterval(changePlayerTimerRef.current);};},[getRandomPiece,startTurnTimer]);// --- Lógica del Temporizador de Turno ---\nuseEffect(()=>{if(isGameActive&&turnTimeLeft>0&&!showChangePlayerMessage){turnTimerRef.current=setInterval(()=>{setTurnTimeLeft(prevTime=>prevTime-1);},1000);}else if(turnTimeLeft===0&&isGameActive){clearInterval(turnTimerRef.current);console.log(\"¡Tiempo agotado para el turno!\");setIsGameActive(false);setShowChangePlayerMessage(true);setChangePlayerTimer(3);}return()=>clearInterval(turnTimerRef.current);},[turnTimeLeft,isGameActive,showChangePlayerMessage]);// --- Lógica del Temporizador de Cambio de Jugador ---\nuseEffect(()=>{if(showChangePlayerMessage&&changePlayerTimer>0){changePlayerTimerRef.current=setInterval(()=>{setChangePlayerTimer(prevTime=>prevTime-1);},1000);}else if(changePlayerTimer===0&&showChangePlayerMessage){clearInterval(changePlayerTimerRef.current);setShowChangePlayerMessage(false);handleNextTurnLogic();// Esto ya incrementa turnCounter\n}return()=>clearInterval(changePlayerTimerRef.current);},[showChangePlayerMessage,changePlayerTimer,handleNextTurnLogic]);const handleVale=()=>{clearInterval(turnTimerRef.current);setIsGameActive(false);setShowChangePlayerMessage(true);setChangePlayerTimer(3);// El handleNextTurnLogic que se llama después de 3s en el timer\n// ya se encargará de incrementar el turnCounter y reiniciar el juego.\n};const handleTerminar=()=>{clearInterval(turnTimerRef.current);clearInterval(changePlayerTimerRef.current);setIsGameActive(false);if(onExitGame){onExitGame();}};// La barra de progreso se basa en el tiempo inicial del turno, no en el actual\nconst currentTurnBaseDuration=getBaseTurnDuration(turnCounter>0?turnCounter:1);// Asegura que siempre haya un valor para la barra\nconst progressPercentage=turnTimeLeft/currentTurnBaseDuration*100;return/*#__PURE__*/_jsxs(\"div\",{className:\"game-container bg-white p-6 rounded-lg shadow-md text-center relative\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:onExitGame,className:\"absolute top-4 left-4 bg-gray-200 hover:bg-gray-300 p-2 rounded-full text-xl\",children:\"\\u2190\"}),/*#__PURE__*/_jsx(\"h2\",{className:\"text-2xl font-bold mb-4 text-gray-800\",children:\"\\xA1Tetris!\"}),/*#__PURE__*/_jsxs(\"p\",{className:\"text-lg text-gray-700 mb-4\",children:[\"Turno #\",turnCounter]}),/*#__PURE__*/_jsx(\"div\",{className:\"w-full bg-gray-200 rounded-full h-4 dark:bg-gray-700 mb-6\",children:/*#__PURE__*/_jsx(\"div\",{className:\"bg-purple-500 h-4 rounded-full transition-all duration-1000 ease-linear\",style:{width:\"\".concat(progressPercentage,\"%\")}})}),showChangePlayerMessage?/*#__PURE__*/_jsxs(\"div\",{className:\"my-10\",children:[/*#__PURE__*/_jsx(\"p\",{className:\"text-green-600 text-5xl font-bold mb-4\",children:\"\\xA1Cambia de Jugador!\"}),/*#__PURE__*/_jsxs(\"p\",{className:\"text-gray-700 text-3xl\",children:[\"Siguiente pieza en \",changePlayerTimer,\"s\"]})]}):currentPiece?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"text-3xl font-extrabold text-blue-700 my-4\"}),/*#__PURE__*/_jsx(\"div\",{className:\"my-8 flex justify-center\",children:/*#__PURE__*/_jsx(\"img\",{src:currentPiece.url_imagen,alt:currentPiece.nombre,className:\"max-h-64 object-contain shadow-lg rounded-lg\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-center space-x-4 mt-8\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:handleVale,className:\"bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-lg text-lg transition duration-300\",children:\"\\xA1Vale!\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleTerminar,className:\"bg-red-500 hover:bg-red-600 text-white font-bold py-3 px-6 rounded-lg text-lg transition duration-300\",children:\"Terminar\"})]})]}):/*#__PURE__*/_jsx(\"div\",{className:\"text-gray-600 text-xl my-8\",children:\"Cargando pieza de Tetris...\"})]});}export default TetrisGame;","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","TetrisGame","_ref","players","onExitGame","tetrisPieces","setTetrisPieces","currentPiece","setCurrentPiece","turnTimeLeft","setTurnTimeLeft","showChangePlayerMessage","setShowChangePlayerMessage","changePlayerTimer","setChangePlayerTimer","isGameActive","setIsGameActive","turnCounter","setTurnCounter","turnTimerRef","changePlayerTimerRef","getBaseTurnDuration","currentTurn","baseTime","reduction","Math","floor","max","getRandomPiece","excludeFirstITetromino","arguments","length","undefined","availablePieces","filter","piece","nombre","console","warn","randomIndex","random","startTurnTimer","turnNumber","clearInterval","current","duration","log","concat","handleNextTurnLogic","nextTurnNumber","nextPiece","then","module","data","default","error","initialTurnNumber","firstPiece","catch","setInterval","prevTime","handleVale","handleTerminar","currentTurnBaseDuration","progressPercentage","className","children","onClick","style","width","src","url_imagen","alt"],"sources":["D:/Proyectos Code/project/src/components/TetrisGame.js"],"sourcesContent":["// src/components/TetrisGame.js\r\n\r\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\r\n\r\n// Si moviste las imágenes a `public` y ajustaste el JSON, esta función no es necesaria.\r\n// Si aún usas `require()`, mantén la versión de la solución anterior.\r\n\r\n\r\nfunction TetrisGame({ players, onExitGame }) {\r\n  // turnTimeLeft será el tiempo restante en el turno actual\r\n  // turnCounter rastrea el número de turnos completados\r\n  const [tetrisPieces, setTetrisPieces] = useState([]);\r\n  const [currentPiece, setCurrentPiece] = useState(null);\r\n  const [turnTimeLeft, setTurnTimeLeft] = useState(10); // Tiempo restante en el turno actual\r\n  const [showChangePlayerMessage, setShowChangePlayerMessage] = useState(false);\r\n  const [changePlayerTimer, setChangePlayerTimer] = useState(3);\r\n  const [isGameActive, setIsGameActive] = useState(false);\r\n  const [turnCounter, setTurnCounter] = useState(0); // Inicia en 0, se incrementa antes de cada turno.\r\n\r\n  const turnTimerRef = useRef(null);\r\n  const changePlayerTimerRef = useRef(null);\r\n\r\n  // Función para calcular el tiempo base del turno según el contador\r\n  const getBaseTurnDuration = useCallback((currentTurn) => {\r\n    let baseTime = 10; // Tiempo inicial base\r\n\r\n    // Cada 5 turnos (después del turno 5, 10, 15, etc.), reduce el tiempo en 1 segundo\r\n    // Math.floor((currentTurn - 1) / 5) para que empiece a bajar *después* del turno 5\r\n    // (ej. turno 6 -> 1, turno 11 -> 2)\r\n    const reduction = Math.floor((currentTurn - 1) / 5);\r\n\r\n    // Asegúrate de que el tiempo mínimo no sea negativo o cero si no es lo que quieres\r\n    return Math.max(1, baseTime - reduction); // Mínimo de 1 segundo\r\n  }, []);\r\n\r\n\r\n  const getRandomPiece = useCallback((excludeFirstITetromino = false) => {\r\n    if (tetrisPieces.length === 0) return null;\r\n\r\n    let availablePieces = [...tetrisPieces];\r\n\r\n    if (excludeFirstITetromino) {\r\n      availablePieces = availablePieces.filter(piece => piece.nombre !== \"Tetris_Oco_I\");\r\n      if (availablePieces.length === 0) {\r\n        console.warn(\"No hay piezas disponibles después de excluir 'Tetris_Oco_I'.\");\r\n        return null;\r\n      }\r\n    }\r\n\r\n    const randomIndex = Math.floor(Math.random() * availablePieces.length);\r\n    return availablePieces[randomIndex];\r\n  }, [tetrisPieces]);\r\n\r\n\r\n  const startTurnTimer = useCallback((turnNumber) => {\r\n    clearInterval(turnTimerRef.current);\r\n    const duration = getBaseTurnDuration(turnNumber); // <--- Usa la nueva función\r\n    setTurnTimeLeft(duration);\r\n    setIsGameActive(true);\r\n    console.log(`Turno #${turnNumber}. Duración del turno: ${duration}s`); // Para depuración\r\n  }, [getBaseTurnDuration]); // Dependencia agregada\r\n\r\n\r\n  const handleNextTurnLogic = useCallback(() => {\r\n    clearInterval(turnTimerRef.current);\r\n\r\n    const nextTurnNumber = turnCounter + 1; // Calculamos el número del siguiente turno\r\n    setTurnCounter(nextTurnNumber); // Actualizamos el contador de turnos\r\n\r\n    const nextPiece = getRandomPiece(false);\r\n    if (nextPiece) {\r\n      setCurrentPiece(nextPiece);\r\n      startTurnTimer(nextTurnNumber); // Pasa el número de turno a startTurnTimer\r\n      setIsGameActive(true);\r\n    } else {\r\n      console.log(\"No hay más piezas para jugar. Juego terminado.\");\r\n      setIsGameActive(false);\r\n      if (onExitGame) {\r\n        onExitGame();\r\n      }\r\n    }\r\n  }, [turnCounter, getRandomPiece, onExitGame, startTurnTimer]); // Dependencia agregada `turnCounter`\r\n\r\n\r\n  useEffect(() => {\r\n    import('../mock/tetris_data.json')\r\n      .then(module => {\r\n        const data = module.default;\r\n        setTetrisPieces(data);\r\n\r\n        if (data.length === 0) {\r\n          console.error(\"tetris_data.json está vacío o no contiene piezas.\");\r\n          setIsGameActive(false);\r\n          return;\r\n        }\r\n\r\n        // Iniciar el juego con el primer turno\r\n        const initialTurnNumber = 1;\r\n        setTurnCounter(initialTurnNumber); // Establece el turno inicial a 1\r\n\r\n        const firstPiece = getRandomPiece(true);\r\n        if (firstPiece) {\r\n          setCurrentPiece(firstPiece);\r\n          startTurnTimer(initialTurnNumber); // Pasa el número de turno\r\n          setIsGameActive(true);\r\n        } else {\r\n            console.error(\"No se pudo seleccionar la primera pieza de Tetris.\");\r\n            setIsGameActive(false);\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error(\"Error al cargar los datos de Tetris:\", error);\r\n        setIsGameActive(false);\r\n      });\r\n\r\n    return () => {\r\n      clearInterval(turnTimerRef.current);\r\n      clearInterval(changePlayerTimerRef.current);\r\n    };\r\n  }, [getRandomPiece, startTurnTimer]);\r\n\r\n\r\n  // --- Lógica del Temporizador de Turno ---\r\n  useEffect(() => {\r\n    if (isGameActive && turnTimeLeft > 0 && !showChangePlayerMessage) {\r\n      turnTimerRef.current = setInterval(() => {\r\n        setTurnTimeLeft(prevTime => prevTime - 1);\r\n      }, 1000);\r\n    } else if (turnTimeLeft === 0 && isGameActive) {\r\n      clearInterval(turnTimerRef.current);\r\n      console.log(\"¡Tiempo agotado para el turno!\");\r\n      setIsGameActive(false);\r\n      setShowChangePlayerMessage(true);\r\n      setChangePlayerTimer(3);\r\n    }\r\n    return () => clearInterval(turnTimerRef.current);\r\n  }, [turnTimeLeft, isGameActive, showChangePlayerMessage]);\r\n\r\n  // --- Lógica del Temporizador de Cambio de Jugador ---\r\n  useEffect(() => {\r\n    if (showChangePlayerMessage && changePlayerTimer > 0) {\r\n      changePlayerTimerRef.current = setInterval(() => {\r\n        setChangePlayerTimer(prevTime => prevTime - 1);\r\n      }, 1000);\r\n    } else if (changePlayerTimer === 0 && showChangePlayerMessage) {\r\n      clearInterval(changePlayerTimerRef.current);\r\n      setShowChangePlayerMessage(false);\r\n      handleNextTurnLogic(); // Esto ya incrementa turnCounter\r\n    }\r\n    return () => clearInterval(changePlayerTimerRef.current);\r\n  }, [showChangePlayerMessage, changePlayerTimer, handleNextTurnLogic]);\r\n\r\n\r\n  const handleVale = () => {\r\n    clearInterval(turnTimerRef.current);\r\n    setIsGameActive(false);\r\n    setShowChangePlayerMessage(true);\r\n    setChangePlayerTimer(3);\r\n    // El handleNextTurnLogic que se llama después de 3s en el timer\r\n    // ya se encargará de incrementar el turnCounter y reiniciar el juego.\r\n  };\r\n\r\n  const handleTerminar = () => {\r\n    clearInterval(turnTimerRef.current);\r\n    clearInterval(changePlayerTimerRef.current);\r\n    setIsGameActive(false);\r\n    if (onExitGame) {\r\n      onExitGame();\r\n    }\r\n  };\r\n\r\n  // La barra de progreso se basa en el tiempo inicial del turno, no en el actual\r\n  const currentTurnBaseDuration = getBaseTurnDuration(turnCounter > 0 ? turnCounter : 1); // Asegura que siempre haya un valor para la barra\r\n  const progressPercentage = (turnTimeLeft / currentTurnBaseDuration) * 100;\r\n\r\n\r\n  return (\r\n    <div className=\"game-container bg-white p-6 rounded-lg shadow-md text-center relative\">\r\n      <button\r\n        onClick={onExitGame}\r\n        className=\"absolute top-4 left-4 bg-gray-200 hover:bg-gray-300 p-2 rounded-full text-xl\"\r\n      >\r\n        &#8592;\r\n      </button>\r\n\r\n      <h2 className=\"text-2xl font-bold mb-4 text-gray-800\">¡Tetris!</h2>\r\n      <p className=\"text-lg text-gray-700 mb-4\">Turno #{turnCounter}</p>\r\n\r\n\r\n      <div className=\"w-full bg-gray-200 rounded-full h-4 dark:bg-gray-700 mb-6\">\r\n        <div\r\n          className=\"bg-purple-500 h-4 rounded-full transition-all duration-1000 ease-linear\"\r\n          style={{ width: `${progressPercentage}%` }}\r\n        ></div>\r\n      </div>\r\n\r\n\r\n      {showChangePlayerMessage ? (\r\n        <div className=\"my-10\">\r\n          <p className=\"text-green-600 text-5xl font-bold mb-4\">¡Cambia de Jugador!</p>\r\n          <p className=\"text-gray-700 text-3xl\">Siguiente pieza en {changePlayerTimer}s</p>\r\n        </div>\r\n      ) : (\r\n        currentPiece ? (\r\n          <>\r\n            <div className=\"text-3xl font-extrabold text-blue-700 my-4\">\r\n            </div>\r\n            <div className=\"my-8 flex justify-center\">\r\n              {/* Usa la url_imagen directamente si las moviste a public */}\r\n              <img\r\n                src={currentPiece.url_imagen}\r\n                alt={currentPiece.nombre}\r\n                className=\"max-h-64 object-contain shadow-lg rounded-lg\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"flex justify-center space-x-4 mt-8\">\r\n              <button\r\n                onClick={handleVale}\r\n                className=\"bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-lg text-lg transition duration-300\"\r\n              >\r\n                ¡Vale!\r\n              </button>\r\n              <button\r\n                onClick={handleTerminar}\r\n                className=\"bg-red-500 hover:bg-red-600 text-white font-bold py-3 px-6 rounded-lg text-lg transition duration-300\"\r\n              >\r\n                Terminar\r\n              </button>\r\n            </div>\r\n          </>\r\n        ) : (\r\n          <div className=\"text-gray-600 text-xl my-8\">Cargando pieza de Tetris...</div>\r\n        )\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TetrisGame;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}