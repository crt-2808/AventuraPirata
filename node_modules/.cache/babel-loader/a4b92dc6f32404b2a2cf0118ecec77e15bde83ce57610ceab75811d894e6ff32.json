{"ast":null,"code":"// src/components/PictionaryGame.js\nimport React,{useState,useEffect,useRef,useCallback}from'react';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";function PictionaryGame(_ref){var _currentElement$pista;let{players,allowedDifficulties,onExitGame}=_ref;const[initialGameData,setInitialGameData]=useState([]);const[activeGameQueue,setActiveGameQueue]=useState([]);const[currentQueueIndex,setCurrentQueueIndex]=useState(0);const[elementsCompleted,setElementsCompleted]=useState(0);const[currentPistaIndex,setCurrentPistaIndex]=useState(0);const[showHintPopup,setShowHintPopup]=useState(false);const[showChangePlayerMessage,setShowChangePlayerMessage]=useState(false);const[showFailedMessage,setShowFailedMessage]=useState(false);const[changePlayerTimer,setChangePlayerTimer]=useState(0);const[hintTimer,setHintTimer]=useState(0);const[failedMessageTimer,setFailedMessageTimer]=useState(0);const[isGameActive,setIsGameActive]=useState(false);const[guessTimeLeft,setGuessTimeLeft]=useState(45);const changePlayerTimerRef=useRef(null);const hintTimerRef=useRef(null);const guessTimerRef=useRef(null);const failedMessageTimerRef=useRef(null);// startGuessTimer ahora solo se usa para INICIAR un nuevo turno, no para reanudar\nconst startGuessTimer=useCallback(()=>{clearInterval(guessTimerRef.current);setGuessTimeLeft(45);setIsGameActive(true);setShowFailedMessage(false);},[]);const handleNextElementLogic=useCallback(()=>{clearInterval(guessTimerRef.current);const nextQueueIndex=currentQueueIndex+1;if(activeGameQueue.length>0&&nextQueueIndex<activeGameQueue.length){setCurrentQueueIndex(nextQueueIndex);setCurrentPistaIndex(0);setElementsCompleted(prev=>prev+1);startGuessTimer();// Inicia el temporizador para el NUEVO elemento\nsetIsGameActive(true);}else if(activeGameQueue.length>0&&nextQueueIndex>=activeGameQueue.length&&initialGameData.length>0){setCurrentQueueIndex(0);setCurrentPistaIndex(0);setElementsCompleted(prev=>prev+1);startGuessTimer();// Inicia el temporizador para el NUEVO elemento (rotado)\nsetIsGameActive(true);}else{console.log(\"¡Juego de Pictionary Terminado!\");setIsGameActive(false);clearInterval(guessTimerRef.current);if(onExitGame){onExitGame();}}},[currentQueueIndex,activeGameQueue,initialGameData.length,onExitGame,startGuessTimer]);// Carga y mezcla los datos del juego al inicio\nuseEffect(()=>{const pictionaryData=require('../mock/pictionary_data.json');const filteredData=pictionaryData.filter(item=>item.Dificultad&&allowedDifficulties.includes(item.Dificultad));const mappedData=filteredData.map(item=>({elemento:item.Elemento,pistas:item.Pistas_Pictionary,dificultad:item.Dificultad}));const selectedElements=[];if(mappedData.length>0){const shuffledData=[...mappedData].sort(()=>0.5-Math.random());for(let i=0;i<5&&i<shuffledData.length;i++){selectedElements.push(shuffledData[i]);}}setInitialGameData(selectedElements);setActiveGameQueue([...selectedElements]);setCurrentQueueIndex(0);setElementsCompleted(0);setCurrentPistaIndex(0);setIsGameActive(true);setShowHintPopup(false);setShowChangePlayerMessage(false);setShowFailedMessage(false);setChangePlayerTimer(0);setHintTimer(0);setFailedMessageTimer(0);startGuessTimer();// Inicia el temporizador al cargar el juego por primera vez\nreturn()=>{clearInterval(changePlayerTimerRef.current);clearInterval(hintTimerRef.current);clearInterval(guessTimerRef.current);clearInterval(failedMessageTimerRef.current);};},[allowedDifficulties,startGuessTimer]);// --- Lógica del Pop-up de Pistas ---\nuseEffect(()=>{if(showHintPopup&&hintTimer>0){hintTimerRef.current=setInterval(()=>{setHintTimer(prevTime=>prevTime-1);},1000);}else if(hintTimer===0&&showHintPopup){// Cuando el temporizador de pista se agota, simplemente cierra el pop-up\n// El temporizador principal de adivinanza se reanudará solo porque showHintPopup será false\ncloseHintPopupInternal();}return()=>clearInterval(hintTimerRef.current);},[showHintPopup,hintTimer]);// Dependencias: solo estos dos estados\n// --- Lógica del Temporizador de Cambio de Jugador ---\nuseEffect(()=>{if(showChangePlayerMessage&&changePlayerTimer>0){changePlayerTimerRef.current=setInterval(()=>{setChangePlayerTimer(prevTime=>prevTime-1);},1000);}else if(changePlayerTimer===0&&showChangePlayerMessage){clearInterval(changePlayerTimerRef.current);setShowChangePlayerMessage(false);handleNextElementLogic();}return()=>clearInterval(changePlayerTimerRef.current);},[showChangePlayerMessage,changePlayerTimer,handleNextElementLogic]);// --- Lógica del Temporizador para \"No Adivinaste\" ---\nuseEffect(()=>{if(showFailedMessage&&failedMessageTimer>0){failedMessageTimerRef.current=setInterval(()=>{setFailedMessageTimer(prevTime=>prevTime-1);},1000);}else if(failedMessageTimer===0&&showFailedMessage){clearInterval(failedMessageTimerRef.current);setShowFailedMessage(false);setShowChangePlayerMessage(true);setChangePlayerTimer(7);}return()=>clearInterval(failedMessageTimerRef.current);},[showFailedMessage,failedMessageTimer]);// --- Lógica del Temporizador Principal de Adivinanza (45 segundos) ---\nuseEffect(()=>{// El temporizador principal solo corre si el juego está activo\n// Y NO hay ningún pop-up o mensaje modal visible (pista, cambio de jugador, no adivinaste)\nif(isGameActive&&guessTimeLeft>0&&!showHintPopup&&!showChangePlayerMessage&&!showFailedMessage){guessTimerRef.current=setInterval(()=>{setGuessTimeLeft(prevTime=>prevTime-1);},1000);}else{// Si alguna condición no se cumple (se pausó o el tiempo llegó a 0)\nclearInterval(guessTimerRef.current);// Detiene el temporizador\nif(guessTimeLeft===0&&isGameActive){// Si el tiempo llegó a 0 y el juego estaba activo\nconsole.log(\"¡Tiempo agotado para adivinar!\");setIsGameActive(false);setShowFailedMessage(true);setFailedMessageTimer(3);setActiveGameQueue(prevQueue=>prevQueue.filter((_,idx)=>idx!==currentQueueIndex));setCurrentQueueIndex(0);}}return()=>clearInterval(guessTimerRef.current);},[guessTimeLeft,isGameActive,showHintPopup,showChangePlayerMessage,showFailedMessage,currentQueueIndex]);const handleShowHint=()=>{const currentElement=activeGameQueue[currentQueueIndex];if(currentElement&&currentElement.pistas){clearInterval(guessTimerRef.current);// Pausa el temporizador de adivinanza\nconst nextPistaIndex=(currentPistaIndex+1)%currentElement.pistas.length;setCurrentPistaIndex(nextPistaIndex);setShowHintPopup(true);setHintTimer(3);// Inicia el temporizador para el pop-up de pista\n}};// Función interna para cerrar el pop-up de pistas, SIN reiniciar el temporizador de adivinanza\nconst closeHintPopupInternal=useCallback(()=>{clearInterval(hintTimerRef.current);// Limpia el temporizador del pop-up de pista\nsetShowHintPopup(false);// Oculta el pop-up\n// No se llama a startGuessTimer() aquí; el useEffect principal de guessTimeLeft\n// se reanudará solo porque showHintPopup ahora es false.\n},[]);// Sin dependencias que cambien frecuentemente, para que sea estable\nconst handleAdivine=()=>{clearInterval(guessTimerRef.current);setIsGameActive(false);setShowChangePlayerMessage(true);setChangePlayerTimer(7);setActiveGameQueue(prevQueue=>prevQueue.filter((_,idx)=>idx!==currentQueueIndex));setCurrentQueueIndex(0);};const handlePassElement=()=>{clearInterval(guessTimerRef.current);setIsGameActive(false);const currentElement=activeGameQueue[currentQueueIndex];if(currentElement){setActiveGameQueue(prevQueue=>{const updatedQueue=prevQueue.filter((_,idx)=>idx!==currentQueueIndex);updatedQueue.push(currentElement);return updatedQueue;});setCurrentQueueIndex(0);}setCurrentPistaIndex(0);startGuessTimer();// Este SÍ debe reiniciar el tiempo porque es un \"nuevo intento\" de objeto\n};if(initialGameData.length===0&&!isGameActive){return/*#__PURE__*/_jsxs(\"div\",{className:\"max-w-md mx-auto mt-8 bg-white p-6 rounded-lg shadow-md text-center\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"text-2xl font-bold mb-4 text-gray-800\",children:\"Cargando juego Pictionary...\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-gray-600\",children:\"Aseg\\xFArate de que hay datos de Pictionary para las dificultades seleccionadas.\"}),/*#__PURE__*/_jsx(\"button\",{onClick:onExitGame,className:\"mt-4 bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded\",children:\"Salir del Juego\"})]});}if(activeGameQueue.length===0&&elementsCompleted===initialGameData.length&&initialGameData.length>0&&!isGameActive&&!showChangePlayerMessage&&!showFailedMessage){return/*#__PURE__*/_jsxs(\"div\",{className:\"max-w-md mx-auto mt-8 bg-white p-6 rounded-lg shadow-md text-center\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"text-2xl font-bold mb-4 text-gray-800\",children:\"\\xA1Juego de Pictionary Terminado!\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-gray-600\",children:\"Gracias por jugar. \\xA1Vuelve pronto!\"}),/*#__PURE__*/_jsx(\"button\",{onClick:onExitGame,className:\"mt-4 bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded\",children:\"Volver al Selector de Juego\"})]});}const currentElement=activeGameQueue[currentQueueIndex];const currentPista=currentElement===null||currentElement===void 0?void 0:(_currentElement$pista=currentElement.pistas)===null||_currentElement$pista===void 0?void 0:_currentElement$pista[currentPistaIndex];const progressPercentage=guessTimeLeft/45*100;return/*#__PURE__*/_jsxs(\"div\",{className:\"game-container bg-white p-6 rounded-lg shadow-md text-center relative\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:onExitGame,className:\"absolute top-4 left-4 bg-gray-200 hover:bg-gray-300 p-2 rounded-full text-xl\",children:\"\\u2190\"}),/*#__PURE__*/_jsx(\"h2\",{className:\"text-2xl font-bold mb-4 text-gray-800\",children:\"\\xA1Pictionary!\"}),/*#__PURE__*/_jsxs(\"p\",{className:\"text-lg text-gray-700 mb-4\",children:[\"Elemento \",elementsCompleted+1,\" de \",initialGameData.length]}),/*#__PURE__*/_jsx(\"div\",{className:\"w-full bg-gray-200 rounded-full h-4 dark:bg-gray-700 mb-6\",children:/*#__PURE__*/_jsx(\"div\",{className:\"bg-red-500 h-4 rounded-full transition-all duration-1000 ease-linear\",style:{width:\"\".concat(progressPercentage,\"%\")}})}),showChangePlayerMessage?/*#__PURE__*/_jsxs(\"div\",{className:\"my-10\",children:[/*#__PURE__*/_jsx(\"p\",{className:\"text-green-600 text-5xl font-bold mb-4\",children:\"\\xA1Cambia de Jugador!\"}),/*#__PURE__*/_jsxs(\"p\",{className:\"text-gray-700 text-3xl\",children:[\"Siguiente elemento en \",changePlayerTimer,\"s\"]})]}):showFailedMessage?/*#__PURE__*/_jsxs(\"div\",{className:\"my-10\",children:[/*#__PURE__*/_jsx(\"p\",{className:\"text-red-600 text-5xl font-bold mb-4 animate-bounce\",children:\"\\xA1No Adivinaste!\"}),/*#__PURE__*/_jsxs(\"p\",{className:\"text-gray-700 text-3xl\",children:[\"Continuando en \",failedMessageTimer,\"s...\"]})]}):/*#__PURE__*/// --- Muestra el Elemento principal del juego ---\n_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"text-5xl font-extrabold text-purple-700 my-8\",children:[\"\\\"\",currentElement===null||currentElement===void 0?void 0:currentElement.elemento,\"\\\"\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-center space-x-4 mt-8\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:handleAdivine,className:\"bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-lg text-lg transition duration-300\",children:\"\\xA1Adivin\\xE9!\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleShowHint,className:\"bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg text-lg transition duration-300\",children:\"Pista\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handlePassElement,className:\"bg-gray-500 hover:bg-gray-600 text-white font-bold py-3 px-6 rounded-lg text-lg transition duration-300\",children:\"Paso\"})]})]}),showHintPopup&&/*#__PURE__*/_jsx(\"div\",{className:\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\",onClick:closeHintPopupInternal// Usa la función interna para cerrar\n,children:/*#__PURE__*/_jsxs(\"div\",{className:\"bg-white p-8 rounded-lg shadow-xl text-center\",onClick:e=>e.stopPropagation(),children:[/*#__PURE__*/_jsx(\"h3\",{className:\"text-3xl font-bold text-gray-800 mb-4\",children:\"Pista:\"}),/*#__PURE__*/_jsxs(\"p\",{className:\"text-blue-600 text-4xl font-extrabold mb-6\",children:[\"\\\"\",currentPista,\"\\\"\"]}),/*#__PURE__*/_jsxs(\"p\",{className:\"text-gray-500 text-lg\",children:[\"Cerrando en \",hintTimer,\"s...\"]})]})})]});}export default PictionaryGame;","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","PictionaryGame","_ref","_currentElement$pista","players","allowedDifficulties","onExitGame","initialGameData","setInitialGameData","activeGameQueue","setActiveGameQueue","currentQueueIndex","setCurrentQueueIndex","elementsCompleted","setElementsCompleted","currentPistaIndex","setCurrentPistaIndex","showHintPopup","setShowHintPopup","showChangePlayerMessage","setShowChangePlayerMessage","showFailedMessage","setShowFailedMessage","changePlayerTimer","setChangePlayerTimer","hintTimer","setHintTimer","failedMessageTimer","setFailedMessageTimer","isGameActive","setIsGameActive","guessTimeLeft","setGuessTimeLeft","changePlayerTimerRef","hintTimerRef","guessTimerRef","failedMessageTimerRef","startGuessTimer","clearInterval","current","handleNextElementLogic","nextQueueIndex","length","prev","console","log","pictionaryData","require","filteredData","filter","item","Dificultad","includes","mappedData","map","elemento","Elemento","pistas","Pistas_Pictionary","dificultad","selectedElements","shuffledData","sort","Math","random","i","push","setInterval","prevTime","closeHintPopupInternal","prevQueue","_","idx","handleShowHint","currentElement","nextPistaIndex","handleAdivine","handlePassElement","updatedQueue","className","children","onClick","currentPista","progressPercentage","style","width","concat","e","stopPropagation"],"sources":["D:/Proyectos Code/project/src/components/PictionaryGame.js"],"sourcesContent":["// src/components/PictionaryGame.js\r\n\r\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\r\n\r\nfunction PictionaryGame({ players, allowedDifficulties, onExitGame }) {\r\n  const [initialGameData, setInitialGameData] = useState([]);\r\n  const [activeGameQueue, setActiveGameQueue] = useState([]);\r\n  const [currentQueueIndex, setCurrentQueueIndex] = useState(0);\r\n  const [elementsCompleted, setElementsCompleted] = useState(0);\r\n\r\n  const [currentPistaIndex, setCurrentPistaIndex] = useState(0);\r\n  const [showHintPopup, setShowHintPopup] = useState(false);\r\n  const [showChangePlayerMessage, setShowChangePlayerMessage] = useState(false);\r\n  const [showFailedMessage, setShowFailedMessage] = useState(false); \r\n  const [changePlayerTimer, setChangePlayerTimer] = useState(0);\r\n  const [hintTimer, setHintTimer] = useState(0);\r\n  const [failedMessageTimer, setFailedMessageTimer] = useState(0);\r\n  const [isGameActive, setIsGameActive] = useState(false);\r\n  const [guessTimeLeft, setGuessTimeLeft] = useState(45);\r\n\r\n  const changePlayerTimerRef = useRef(null);\r\n  const hintTimerRef = useRef(null);\r\n  const guessTimerRef = useRef(null);\r\n  const failedMessageTimerRef = useRef(null);\r\n\r\n\r\n  // startGuessTimer ahora solo se usa para INICIAR un nuevo turno, no para reanudar\r\n  const startGuessTimer = useCallback(() => {\r\n    clearInterval(guessTimerRef.current);\r\n    setGuessTimeLeft(45);\r\n    setIsGameActive(true);\r\n    setShowFailedMessage(false);\r\n  }, []);\r\n\r\n  const handleNextElementLogic = useCallback(() => {\r\n    clearInterval(guessTimerRef.current);\r\n\r\n    const nextQueueIndex = currentQueueIndex + 1;\r\n\r\n    if (activeGameQueue.length > 0 && nextQueueIndex < activeGameQueue.length) {\r\n      setCurrentQueueIndex(nextQueueIndex);\r\n      setCurrentPistaIndex(0);\r\n      setElementsCompleted(prev => prev + 1);\r\n      startGuessTimer(); // Inicia el temporizador para el NUEVO elemento\r\n      setIsGameActive(true);\r\n    } else if (activeGameQueue.length > 0 && nextQueueIndex >= activeGameQueue.length && initialGameData.length > 0) {\r\n        setCurrentQueueIndex(0);\r\n        setCurrentPistaIndex(0);\r\n        setElementsCompleted(prev => prev + 1);\r\n        startGuessTimer(); // Inicia el temporizador para el NUEVO elemento (rotado)\r\n        setIsGameActive(true);\r\n    }\r\n    else {\r\n      console.log(\"¡Juego de Pictionary Terminado!\");\r\n      setIsGameActive(false);\r\n      clearInterval(guessTimerRef.current);\r\n      if (onExitGame) {\r\n        onExitGame();\r\n      }\r\n    }\r\n  }, [currentQueueIndex, activeGameQueue, initialGameData.length, onExitGame, startGuessTimer]);\r\n\r\n\r\n  // Carga y mezcla los datos del juego al inicio\r\n  useEffect(() => {\r\n    const pictionaryData = require('../mock/pictionary_data.json');\r\n\r\n    const filteredData = pictionaryData.filter(item =>\r\n      item.Dificultad && allowedDifficulties.includes(item.Dificultad)\r\n    );\r\n\r\n    const mappedData = filteredData.map(item => ({\r\n      elemento: item.Elemento,\r\n      pistas: item.Pistas_Pictionary,\r\n      dificultad: item.Dificultad\r\n    }));\r\n\r\n    const selectedElements = [];\r\n    if (mappedData.length > 0) {\r\n      const shuffledData = [...mappedData].sort(() => 0.5 - Math.random());\r\n      for (let i = 0; i < 5 && i < shuffledData.length; i++) {\r\n        selectedElements.push(shuffledData[i]);\r\n      }\r\n    }\r\n    setInitialGameData(selectedElements);\r\n    setActiveGameQueue([...selectedElements]);\r\n    setCurrentQueueIndex(0);\r\n    setElementsCompleted(0);\r\n    setCurrentPistaIndex(0);\r\n    setIsGameActive(true);\r\n    setShowHintPopup(false);\r\n    setShowChangePlayerMessage(false);\r\n    setShowFailedMessage(false);\r\n    setChangePlayerTimer(0);\r\n    setHintTimer(0);\r\n    setFailedMessageTimer(0);\r\n    startGuessTimer(); // Inicia el temporizador al cargar el juego por primera vez\r\n\r\n\r\n    return () => {\r\n      clearInterval(changePlayerTimerRef.current);\r\n      clearInterval(hintTimerRef.current);\r\n      clearInterval(guessTimerRef.current);\r\n      clearInterval(failedMessageTimerRef.current);\r\n    };\r\n  }, [allowedDifficulties, startGuessTimer]);\r\n\r\n  // --- Lógica del Pop-up de Pistas ---\r\n  useEffect(() => {\r\n    if (showHintPopup && hintTimer > 0) {\r\n      hintTimerRef.current = setInterval(() => {\r\n        setHintTimer(prevTime => prevTime - 1);\r\n      }, 1000);\r\n    } else if (hintTimer === 0 && showHintPopup) {\r\n      // Cuando el temporizador de pista se agota, simplemente cierra el pop-up\r\n      // El temporizador principal de adivinanza se reanudará solo porque showHintPopup será false\r\n      closeHintPopupInternal(); \r\n    }\r\n    return () => clearInterval(hintTimerRef.current);\r\n  }, [showHintPopup, hintTimer]); // Dependencias: solo estos dos estados\r\n\r\n  // --- Lógica del Temporizador de Cambio de Jugador ---\r\n  useEffect(() => {\r\n    if (showChangePlayerMessage && changePlayerTimer > 0) {\r\n      changePlayerTimerRef.current = setInterval(() => {\r\n        setChangePlayerTimer(prevTime => prevTime - 1);\r\n      }, 1000);\r\n    } else if (changePlayerTimer === 0 && showChangePlayerMessage) {\r\n      clearInterval(changePlayerTimerRef.current);\r\n      setShowChangePlayerMessage(false);\r\n      handleNextElementLogic(); \r\n    }\r\n    return () => clearInterval(changePlayerTimerRef.current);\r\n  }, [showChangePlayerMessage, changePlayerTimer, handleNextElementLogic]);\r\n\r\n  // --- Lógica del Temporizador para \"No Adivinaste\" ---\r\n  useEffect(() => {\r\n    if (showFailedMessage && failedMessageTimer > 0) {\r\n      failedMessageTimerRef.current = setInterval(() => {\r\n        setFailedMessageTimer(prevTime => prevTime - 1);\r\n      }, 1000);\r\n    } else if (failedMessageTimer === 0 && showFailedMessage) {\r\n      clearInterval(failedMessageTimerRef.current);\r\n      setShowFailedMessage(false);\r\n      setShowChangePlayerMessage(true);\r\n      setChangePlayerTimer(7);\r\n    }\r\n    return () => clearInterval(failedMessageTimerRef.current);\r\n  }, [showFailedMessage, failedMessageTimer]);\r\n\r\n\r\n  // --- Lógica del Temporizador Principal de Adivinanza (45 segundos) ---\r\n  useEffect(() => {\r\n    // El temporizador principal solo corre si el juego está activo\r\n    // Y NO hay ningún pop-up o mensaje modal visible (pista, cambio de jugador, no adivinaste)\r\n    if (isGameActive && guessTimeLeft > 0 && !showHintPopup && !showChangePlayerMessage && !showFailedMessage) {\r\n      guessTimerRef.current = setInterval(() => {\r\n        setGuessTimeLeft(prevTime => prevTime - 1);\r\n      }, 1000);\r\n    } else { // Si alguna condición no se cumple (se pausó o el tiempo llegó a 0)\r\n      clearInterval(guessTimerRef.current); // Detiene el temporizador\r\n      if (guessTimeLeft === 0 && isGameActive) { // Si el tiempo llegó a 0 y el juego estaba activo\r\n        console.log(\"¡Tiempo agotado para adivinar!\");\r\n        setIsGameActive(false);\r\n        setShowFailedMessage(true);\r\n        setFailedMessageTimer(3);\r\n\r\n        setActiveGameQueue(prevQueue => prevQueue.filter((_, idx) => idx !== currentQueueIndex));\r\n        setCurrentQueueIndex(0);\r\n      }\r\n    }\r\n    return () => clearInterval(guessTimerRef.current);\r\n  }, [guessTimeLeft, isGameActive, showHintPopup, showChangePlayerMessage, showFailedMessage, currentQueueIndex]);\r\n\r\n\r\n  const handleShowHint = () => {\r\n    const currentElement = activeGameQueue[currentQueueIndex];\r\n    if (currentElement && currentElement.pistas) {\r\n      clearInterval(guessTimerRef.current); // Pausa el temporizador de adivinanza\r\n      \r\n      const nextPistaIndex = (currentPistaIndex + 1) % currentElement.pistas.length;\r\n      setCurrentPistaIndex(nextPistaIndex);\r\n\r\n      setShowHintPopup(true);\r\n      setHintTimer(3); // Inicia el temporizador para el pop-up de pista\r\n    }\r\n  };\r\n\r\n  // Función interna para cerrar el pop-up de pistas, SIN reiniciar el temporizador de adivinanza\r\n  const closeHintPopupInternal = useCallback(() => {\r\n    clearInterval(hintTimerRef.current); // Limpia el temporizador del pop-up de pista\r\n    setShowHintPopup(false); // Oculta el pop-up\r\n    // No se llama a startGuessTimer() aquí; el useEffect principal de guessTimeLeft\r\n    // se reanudará solo porque showHintPopup ahora es false.\r\n  }, []); // Sin dependencias que cambien frecuentemente, para que sea estable\r\n\r\n  const handleAdivine = () => {\r\n    clearInterval(guessTimerRef.current);\r\n    setIsGameActive(false);\r\n    setShowChangePlayerMessage(true);\r\n    setChangePlayerTimer(7);\r\n    \r\n    setActiveGameQueue(prevQueue => prevQueue.filter((_, idx) => idx !== currentQueueIndex));\r\n    setCurrentQueueIndex(0); \r\n  };\r\n\r\n  const handlePassElement = () => {\r\n    clearInterval(guessTimerRef.current);\r\n    setIsGameActive(false); \r\n    \r\n    const currentElement = activeGameQueue[currentQueueIndex];\r\n\r\n    if (currentElement) {\r\n        setActiveGameQueue(prevQueue => {\r\n            const updatedQueue = prevQueue.filter((_, idx) => idx !== currentQueueIndex);\r\n            updatedQueue.push(currentElement);\r\n            return updatedQueue;\r\n        });\r\n        setCurrentQueueIndex(0);\r\n    }\r\n    \r\n    setCurrentPistaIndex(0);\r\n    startGuessTimer(); // Este SÍ debe reiniciar el tiempo porque es un \"nuevo intento\" de objeto\r\n  };\r\n\r\n\r\n  if (initialGameData.length === 0 && !isGameActive) {\r\n    return (\r\n      <div className=\"max-w-md mx-auto mt-8 bg-white p-6 rounded-lg shadow-md text-center\">\r\n        <h2 className=\"text-2xl font-bold mb-4 text-gray-800\">Cargando juego Pictionary...</h2>\r\n        <p className=\"text-gray-600\">Asegúrate de que hay datos de Pictionary para las dificultades seleccionadas.</p>\r\n        <button onClick={onExitGame} className=\"mt-4 bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded\">\r\n          Salir del Juego\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (activeGameQueue.length === 0 && elementsCompleted === initialGameData.length && initialGameData.length > 0 && !isGameActive && !showChangePlayerMessage && !showFailedMessage) {\r\n    return (\r\n      <div className=\"max-w-md mx-auto mt-8 bg-white p-6 rounded-lg shadow-md text-center\">\r\n        <h2 className=\"text-2xl font-bold mb-4 text-gray-800\">¡Juego de Pictionary Terminado!</h2>\r\n        <p className=\"text-gray-600\">Gracias por jugar. ¡Vuelve pronto!</p>\r\n        <button onClick={onExitGame} className=\"mt-4 bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded\">\r\n          Volver al Selector de Juego\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const currentElement = activeGameQueue[currentQueueIndex];\r\n  const currentPista = currentElement?.pistas?.[currentPistaIndex];\r\n\r\n\r\n  const progressPercentage = (guessTimeLeft / 45) * 100;\r\n\r\n  return (\r\n    <div className=\"game-container bg-white p-6 rounded-lg shadow-md text-center relative\">\r\n      <button\r\n        onClick={onExitGame}\r\n        className=\"absolute top-4 left-4 bg-gray-200 hover:bg-gray-300 p-2 rounded-full text-xl\"\r\n      >\r\n        &#8592;\r\n      </button>\r\n\r\n      <h2 className=\"text-2xl font-bold mb-4 text-gray-800\">¡Pictionary!</h2>\r\n\r\n      <p className=\"text-lg text-gray-700 mb-4\">Elemento {elementsCompleted + 1} de {initialGameData.length}</p>\r\n\r\n      {/* Barra de progreso del tiempo de adivinanza */}\r\n      <div className=\"w-full bg-gray-200 rounded-full h-4 dark:bg-gray-700 mb-6\">\r\n        <div\r\n          className=\"bg-red-500 h-4 rounded-full transition-all duration-1000 ease-linear\"\r\n          style={{ width: `${progressPercentage}%` }}\r\n        ></div>\r\n      </div>\r\n\r\n      {/* --- Mensajes de estado (se muestran condicionalmente) --- */}\r\n      {showChangePlayerMessage ? (\r\n        <div className=\"my-10\">\r\n          <p className=\"text-green-600 text-5xl font-bold mb-4\">¡Cambia de Jugador!</p>\r\n          <p className=\"text-gray-700 text-3xl\">Siguiente elemento en {changePlayerTimer}s</p>\r\n        </div>\r\n      ) : showFailedMessage ? (\r\n        <div className=\"my-10\">\r\n          <p className=\"text-red-600 text-5xl font-bold mb-4 animate-bounce\">¡No Adivinaste!</p>\r\n          <p className=\"text-gray-700 text-3xl\">Continuando en {failedMessageTimer}s...</p>\r\n        </div>\r\n      ) : (\r\n        // --- Muestra el Elemento principal del juego ---\r\n        <>\r\n          <div className=\"text-5xl font-extrabold text-purple-700 my-8\">\r\n            \"{currentElement?.elemento}\"\r\n          </div>\r\n\r\n          <div className=\"flex justify-center space-x-4 mt-8\">\r\n            <button\r\n              onClick={handleAdivine}\r\n              className=\"bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-lg text-lg transition duration-300\"\r\n            >\r\n              ¡Adiviné!\r\n            </button>\r\n            <button\r\n              onClick={handleShowHint}\r\n              className=\"bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg text-lg transition duration-300\"\r\n            >\r\n              Pista\r\n            </button>\r\n            <button\r\n              onClick={handlePassElement}\r\n              className=\"bg-gray-500 hover:bg-gray-600 text-white font-bold py-3 px-6 rounded-lg text-lg transition duration-300\"\r\n            >\r\n              Paso\r\n            </button>\r\n          </div>\r\n        </>\r\n      )}\r\n\r\n      {/* --- Pop-up de Pistas --- */}\r\n      {showHintPopup && (\r\n        <div \r\n          className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\"\r\n          onClick={closeHintPopupInternal} // Usa la función interna para cerrar\r\n        >\r\n          <div \r\n            className=\"bg-white p-8 rounded-lg shadow-xl text-center\"\r\n            onClick={(e) => e.stopPropagation()}\r\n          >\r\n            <h3 className=\"text-3xl font-bold text-gray-800 mb-4\">Pista:</h3>\r\n            <p className=\"text-blue-600 text-4xl font-extrabold mb-6\">\"{currentPista}\"</p>\r\n            <p className=\"text-gray-500 text-lg\">Cerrando en {hintTimer}s...</p>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PictionaryGame;"],"mappings":"AAAA;AAEA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,CAAEC,MAAM,CAAEC,WAAW,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,CAAAC,QAAA,IAAAC,SAAA,yBAExE,QAAS,CAAAC,cAAcA,CAAAC,IAAA,CAA+C,KAAAC,qBAAA,IAA9C,CAAEC,OAAO,CAAEC,mBAAmB,CAAEC,UAAW,CAAC,CAAAJ,IAAA,CAClE,KAAM,CAACK,eAAe,CAAEC,kBAAkB,CAAC,CAAGjB,QAAQ,CAAC,EAAE,CAAC,CAC1D,KAAM,CAACkB,eAAe,CAAEC,kBAAkB,CAAC,CAAGnB,QAAQ,CAAC,EAAE,CAAC,CAC1D,KAAM,CAACoB,iBAAiB,CAAEC,oBAAoB,CAAC,CAAGrB,QAAQ,CAAC,CAAC,CAAC,CAC7D,KAAM,CAACsB,iBAAiB,CAAEC,oBAAoB,CAAC,CAAGvB,QAAQ,CAAC,CAAC,CAAC,CAE7D,KAAM,CAACwB,iBAAiB,CAAEC,oBAAoB,CAAC,CAAGzB,QAAQ,CAAC,CAAC,CAAC,CAC7D,KAAM,CAAC0B,aAAa,CAAEC,gBAAgB,CAAC,CAAG3B,QAAQ,CAAC,KAAK,CAAC,CACzD,KAAM,CAAC4B,uBAAuB,CAAEC,0BAA0B,CAAC,CAAG7B,QAAQ,CAAC,KAAK,CAAC,CAC7E,KAAM,CAAC8B,iBAAiB,CAAEC,oBAAoB,CAAC,CAAG/B,QAAQ,CAAC,KAAK,CAAC,CACjE,KAAM,CAACgC,iBAAiB,CAAEC,oBAAoB,CAAC,CAAGjC,QAAQ,CAAC,CAAC,CAAC,CAC7D,KAAM,CAACkC,SAAS,CAAEC,YAAY,CAAC,CAAGnC,QAAQ,CAAC,CAAC,CAAC,CAC7C,KAAM,CAACoC,kBAAkB,CAAEC,qBAAqB,CAAC,CAAGrC,QAAQ,CAAC,CAAC,CAAC,CAC/D,KAAM,CAACsC,YAAY,CAAEC,eAAe,CAAC,CAAGvC,QAAQ,CAAC,KAAK,CAAC,CACvD,KAAM,CAACwC,aAAa,CAAEC,gBAAgB,CAAC,CAAGzC,QAAQ,CAAC,EAAE,CAAC,CAEtD,KAAM,CAAA0C,oBAAoB,CAAGxC,MAAM,CAAC,IAAI,CAAC,CACzC,KAAM,CAAAyC,YAAY,CAAGzC,MAAM,CAAC,IAAI,CAAC,CACjC,KAAM,CAAA0C,aAAa,CAAG1C,MAAM,CAAC,IAAI,CAAC,CAClC,KAAM,CAAA2C,qBAAqB,CAAG3C,MAAM,CAAC,IAAI,CAAC,CAG1C;AACA,KAAM,CAAA4C,eAAe,CAAG3C,WAAW,CAAC,IAAM,CACxC4C,aAAa,CAACH,aAAa,CAACI,OAAO,CAAC,CACpCP,gBAAgB,CAAC,EAAE,CAAC,CACpBF,eAAe,CAAC,IAAI,CAAC,CACrBR,oBAAoB,CAAC,KAAK,CAAC,CAC7B,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAkB,sBAAsB,CAAG9C,WAAW,CAAC,IAAM,CAC/C4C,aAAa,CAACH,aAAa,CAACI,OAAO,CAAC,CAEpC,KAAM,CAAAE,cAAc,CAAG9B,iBAAiB,CAAG,CAAC,CAE5C,GAAIF,eAAe,CAACiC,MAAM,CAAG,CAAC,EAAID,cAAc,CAAGhC,eAAe,CAACiC,MAAM,CAAE,CACzE9B,oBAAoB,CAAC6B,cAAc,CAAC,CACpCzB,oBAAoB,CAAC,CAAC,CAAC,CACvBF,oBAAoB,CAAC6B,IAAI,EAAIA,IAAI,CAAG,CAAC,CAAC,CACtCN,eAAe,CAAC,CAAC,CAAE;AACnBP,eAAe,CAAC,IAAI,CAAC,CACvB,CAAC,IAAM,IAAIrB,eAAe,CAACiC,MAAM,CAAG,CAAC,EAAID,cAAc,EAAIhC,eAAe,CAACiC,MAAM,EAAInC,eAAe,CAACmC,MAAM,CAAG,CAAC,CAAE,CAC7G9B,oBAAoB,CAAC,CAAC,CAAC,CACvBI,oBAAoB,CAAC,CAAC,CAAC,CACvBF,oBAAoB,CAAC6B,IAAI,EAAIA,IAAI,CAAG,CAAC,CAAC,CACtCN,eAAe,CAAC,CAAC,CAAE;AACnBP,eAAe,CAAC,IAAI,CAAC,CACzB,CAAC,IACI,CACHc,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC,CAC9Cf,eAAe,CAAC,KAAK,CAAC,CACtBQ,aAAa,CAACH,aAAa,CAACI,OAAO,CAAC,CACpC,GAAIjC,UAAU,CAAE,CACdA,UAAU,CAAC,CAAC,CACd,CACF,CACF,CAAC,CAAE,CAACK,iBAAiB,CAAEF,eAAe,CAAEF,eAAe,CAACmC,MAAM,CAAEpC,UAAU,CAAE+B,eAAe,CAAC,CAAC,CAG7F;AACA7C,SAAS,CAAC,IAAM,CACd,KAAM,CAAAsD,cAAc,CAAGC,OAAO,CAAC,8BAA8B,CAAC,CAE9D,KAAM,CAAAC,YAAY,CAAGF,cAAc,CAACG,MAAM,CAACC,IAAI,EAC7CA,IAAI,CAACC,UAAU,EAAI9C,mBAAmB,CAAC+C,QAAQ,CAACF,IAAI,CAACC,UAAU,CACjE,CAAC,CAED,KAAM,CAAAE,UAAU,CAAGL,YAAY,CAACM,GAAG,CAACJ,IAAI,GAAK,CAC3CK,QAAQ,CAAEL,IAAI,CAACM,QAAQ,CACvBC,MAAM,CAAEP,IAAI,CAACQ,iBAAiB,CAC9BC,UAAU,CAAET,IAAI,CAACC,UACnB,CAAC,CAAC,CAAC,CAEH,KAAM,CAAAS,gBAAgB,CAAG,EAAE,CAC3B,GAAIP,UAAU,CAACX,MAAM,CAAG,CAAC,CAAE,CACzB,KAAM,CAAAmB,YAAY,CAAG,CAAC,GAAGR,UAAU,CAAC,CAACS,IAAI,CAAC,IAAM,GAAG,CAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,CACpE,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAG,CAAC,EAAIA,CAAC,CAAGJ,YAAY,CAACnB,MAAM,CAAEuB,CAAC,EAAE,CAAE,CACrDL,gBAAgB,CAACM,IAAI,CAACL,YAAY,CAACI,CAAC,CAAC,CAAC,CACxC,CACF,CACAzD,kBAAkB,CAACoD,gBAAgB,CAAC,CACpClD,kBAAkB,CAAC,CAAC,GAAGkD,gBAAgB,CAAC,CAAC,CACzChD,oBAAoB,CAAC,CAAC,CAAC,CACvBE,oBAAoB,CAAC,CAAC,CAAC,CACvBE,oBAAoB,CAAC,CAAC,CAAC,CACvBc,eAAe,CAAC,IAAI,CAAC,CACrBZ,gBAAgB,CAAC,KAAK,CAAC,CACvBE,0BAA0B,CAAC,KAAK,CAAC,CACjCE,oBAAoB,CAAC,KAAK,CAAC,CAC3BE,oBAAoB,CAAC,CAAC,CAAC,CACvBE,YAAY,CAAC,CAAC,CAAC,CACfE,qBAAqB,CAAC,CAAC,CAAC,CACxBS,eAAe,CAAC,CAAC,CAAE;AAGnB,MAAO,IAAM,CACXC,aAAa,CAACL,oBAAoB,CAACM,OAAO,CAAC,CAC3CD,aAAa,CAACJ,YAAY,CAACK,OAAO,CAAC,CACnCD,aAAa,CAACH,aAAa,CAACI,OAAO,CAAC,CACpCD,aAAa,CAACF,qBAAqB,CAACG,OAAO,CAAC,CAC9C,CAAC,CACH,CAAC,CAAE,CAAClC,mBAAmB,CAAEgC,eAAe,CAAC,CAAC,CAE1C;AACA7C,SAAS,CAAC,IAAM,CACd,GAAIyB,aAAa,EAAIQ,SAAS,CAAG,CAAC,CAAE,CAClCS,YAAY,CAACK,OAAO,CAAG4B,WAAW,CAAC,IAAM,CACvCzC,YAAY,CAAC0C,QAAQ,EAAIA,QAAQ,CAAG,CAAC,CAAC,CACxC,CAAC,CAAE,IAAI,CAAC,CACV,CAAC,IAAM,IAAI3C,SAAS,GAAK,CAAC,EAAIR,aAAa,CAAE,CAC3C;AACA;AACAoD,sBAAsB,CAAC,CAAC,CAC1B,CACA,MAAO,IAAM/B,aAAa,CAACJ,YAAY,CAACK,OAAO,CAAC,CAClD,CAAC,CAAE,CAACtB,aAAa,CAAEQ,SAAS,CAAC,CAAC,CAAE;AAEhC;AACAjC,SAAS,CAAC,IAAM,CACd,GAAI2B,uBAAuB,EAAII,iBAAiB,CAAG,CAAC,CAAE,CACpDU,oBAAoB,CAACM,OAAO,CAAG4B,WAAW,CAAC,IAAM,CAC/C3C,oBAAoB,CAAC4C,QAAQ,EAAIA,QAAQ,CAAG,CAAC,CAAC,CAChD,CAAC,CAAE,IAAI,CAAC,CACV,CAAC,IAAM,IAAI7C,iBAAiB,GAAK,CAAC,EAAIJ,uBAAuB,CAAE,CAC7DmB,aAAa,CAACL,oBAAoB,CAACM,OAAO,CAAC,CAC3CnB,0BAA0B,CAAC,KAAK,CAAC,CACjCoB,sBAAsB,CAAC,CAAC,CAC1B,CACA,MAAO,IAAMF,aAAa,CAACL,oBAAoB,CAACM,OAAO,CAAC,CAC1D,CAAC,CAAE,CAACpB,uBAAuB,CAAEI,iBAAiB,CAAEiB,sBAAsB,CAAC,CAAC,CAExE;AACAhD,SAAS,CAAC,IAAM,CACd,GAAI6B,iBAAiB,EAAIM,kBAAkB,CAAG,CAAC,CAAE,CAC/CS,qBAAqB,CAACG,OAAO,CAAG4B,WAAW,CAAC,IAAM,CAChDvC,qBAAqB,CAACwC,QAAQ,EAAIA,QAAQ,CAAG,CAAC,CAAC,CACjD,CAAC,CAAE,IAAI,CAAC,CACV,CAAC,IAAM,IAAIzC,kBAAkB,GAAK,CAAC,EAAIN,iBAAiB,CAAE,CACxDiB,aAAa,CAACF,qBAAqB,CAACG,OAAO,CAAC,CAC5CjB,oBAAoB,CAAC,KAAK,CAAC,CAC3BF,0BAA0B,CAAC,IAAI,CAAC,CAChCI,oBAAoB,CAAC,CAAC,CAAC,CACzB,CACA,MAAO,IAAMc,aAAa,CAACF,qBAAqB,CAACG,OAAO,CAAC,CAC3D,CAAC,CAAE,CAAClB,iBAAiB,CAAEM,kBAAkB,CAAC,CAAC,CAG3C;AACAnC,SAAS,CAAC,IAAM,CACd;AACA;AACA,GAAIqC,YAAY,EAAIE,aAAa,CAAG,CAAC,EAAI,CAACd,aAAa,EAAI,CAACE,uBAAuB,EAAI,CAACE,iBAAiB,CAAE,CACzGc,aAAa,CAACI,OAAO,CAAG4B,WAAW,CAAC,IAAM,CACxCnC,gBAAgB,CAACoC,QAAQ,EAAIA,QAAQ,CAAG,CAAC,CAAC,CAC5C,CAAC,CAAE,IAAI,CAAC,CACV,CAAC,IAAM,CAAE;AACP9B,aAAa,CAACH,aAAa,CAACI,OAAO,CAAC,CAAE;AACtC,GAAIR,aAAa,GAAK,CAAC,EAAIF,YAAY,CAAE,CAAE;AACzCe,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC,CAC7Cf,eAAe,CAAC,KAAK,CAAC,CACtBR,oBAAoB,CAAC,IAAI,CAAC,CAC1BM,qBAAqB,CAAC,CAAC,CAAC,CAExBlB,kBAAkB,CAAC4D,SAAS,EAAIA,SAAS,CAACrB,MAAM,CAAC,CAACsB,CAAC,CAAEC,GAAG,GAAKA,GAAG,GAAK7D,iBAAiB,CAAC,CAAC,CACxFC,oBAAoB,CAAC,CAAC,CAAC,CACzB,CACF,CACA,MAAO,IAAM0B,aAAa,CAACH,aAAa,CAACI,OAAO,CAAC,CACnD,CAAC,CAAE,CAACR,aAAa,CAAEF,YAAY,CAAEZ,aAAa,CAAEE,uBAAuB,CAAEE,iBAAiB,CAAEV,iBAAiB,CAAC,CAAC,CAG/G,KAAM,CAAA8D,cAAc,CAAGA,CAAA,GAAM,CAC3B,KAAM,CAAAC,cAAc,CAAGjE,eAAe,CAACE,iBAAiB,CAAC,CACzD,GAAI+D,cAAc,EAAIA,cAAc,CAACjB,MAAM,CAAE,CAC3CnB,aAAa,CAACH,aAAa,CAACI,OAAO,CAAC,CAAE;AAEtC,KAAM,CAAAoC,cAAc,CAAG,CAAC5D,iBAAiB,CAAG,CAAC,EAAI2D,cAAc,CAACjB,MAAM,CAACf,MAAM,CAC7E1B,oBAAoB,CAAC2D,cAAc,CAAC,CAEpCzD,gBAAgB,CAAC,IAAI,CAAC,CACtBQ,YAAY,CAAC,CAAC,CAAC,CAAE;AACnB,CACF,CAAC,CAED;AACA,KAAM,CAAA2C,sBAAsB,CAAG3E,WAAW,CAAC,IAAM,CAC/C4C,aAAa,CAACJ,YAAY,CAACK,OAAO,CAAC,CAAE;AACrCrB,gBAAgB,CAAC,KAAK,CAAC,CAAE;AACzB;AACA;AACF,CAAC,CAAE,EAAE,CAAC,CAAE;AAER,KAAM,CAAA0D,aAAa,CAAGA,CAAA,GAAM,CAC1BtC,aAAa,CAACH,aAAa,CAACI,OAAO,CAAC,CACpCT,eAAe,CAAC,KAAK,CAAC,CACtBV,0BAA0B,CAAC,IAAI,CAAC,CAChCI,oBAAoB,CAAC,CAAC,CAAC,CAEvBd,kBAAkB,CAAC4D,SAAS,EAAIA,SAAS,CAACrB,MAAM,CAAC,CAACsB,CAAC,CAAEC,GAAG,GAAKA,GAAG,GAAK7D,iBAAiB,CAAC,CAAC,CACxFC,oBAAoB,CAAC,CAAC,CAAC,CACzB,CAAC,CAED,KAAM,CAAAiE,iBAAiB,CAAGA,CAAA,GAAM,CAC9BvC,aAAa,CAACH,aAAa,CAACI,OAAO,CAAC,CACpCT,eAAe,CAAC,KAAK,CAAC,CAEtB,KAAM,CAAA4C,cAAc,CAAGjE,eAAe,CAACE,iBAAiB,CAAC,CAEzD,GAAI+D,cAAc,CAAE,CAChBhE,kBAAkB,CAAC4D,SAAS,EAAI,CAC5B,KAAM,CAAAQ,YAAY,CAAGR,SAAS,CAACrB,MAAM,CAAC,CAACsB,CAAC,CAAEC,GAAG,GAAKA,GAAG,GAAK7D,iBAAiB,CAAC,CAC5EmE,YAAY,CAACZ,IAAI,CAACQ,cAAc,CAAC,CACjC,MAAO,CAAAI,YAAY,CACvB,CAAC,CAAC,CACFlE,oBAAoB,CAAC,CAAC,CAAC,CAC3B,CAEAI,oBAAoB,CAAC,CAAC,CAAC,CACvBqB,eAAe,CAAC,CAAC,CAAE;AACrB,CAAC,CAGD,GAAI9B,eAAe,CAACmC,MAAM,GAAK,CAAC,EAAI,CAACb,YAAY,CAAE,CACjD,mBACE/B,KAAA,QAAKiF,SAAS,CAAC,qEAAqE,CAAAC,QAAA,eAClFpF,IAAA,OAAImF,SAAS,CAAC,uCAAuC,CAAAC,QAAA,CAAC,8BAA4B,CAAI,CAAC,cACvFpF,IAAA,MAAGmF,SAAS,CAAC,eAAe,CAAAC,QAAA,CAAC,kFAA6E,CAAG,CAAC,cAC9GpF,IAAA,WAAQqF,OAAO,CAAE3E,UAAW,CAACyE,SAAS,CAAC,yEAAyE,CAAAC,QAAA,CAAC,iBAEjH,CAAQ,CAAC,EACN,CAAC,CAEV,CAEA,GAAIvE,eAAe,CAACiC,MAAM,GAAK,CAAC,EAAI7B,iBAAiB,GAAKN,eAAe,CAACmC,MAAM,EAAInC,eAAe,CAACmC,MAAM,CAAG,CAAC,EAAI,CAACb,YAAY,EAAI,CAACV,uBAAuB,EAAI,CAACE,iBAAiB,CAAE,CACjL,mBACEvB,KAAA,QAAKiF,SAAS,CAAC,qEAAqE,CAAAC,QAAA,eAClFpF,IAAA,OAAImF,SAAS,CAAC,uCAAuC,CAAAC,QAAA,CAAC,oCAA+B,CAAI,CAAC,cAC1FpF,IAAA,MAAGmF,SAAS,CAAC,eAAe,CAAAC,QAAA,CAAC,uCAAkC,CAAG,CAAC,cACnEpF,IAAA,WAAQqF,OAAO,CAAE3E,UAAW,CAACyE,SAAS,CAAC,2EAA2E,CAAAC,QAAA,CAAC,6BAEnH,CAAQ,CAAC,EACN,CAAC,CAEV,CAEA,KAAM,CAAAN,cAAc,CAAGjE,eAAe,CAACE,iBAAiB,CAAC,CACzD,KAAM,CAAAuE,YAAY,CAAGR,cAAc,SAAdA,cAAc,kBAAAvE,qBAAA,CAAduE,cAAc,CAAEjB,MAAM,UAAAtD,qBAAA,iBAAtBA,qBAAA,CAAyBY,iBAAiB,CAAC,CAGhE,KAAM,CAAAoE,kBAAkB,CAAIpD,aAAa,CAAG,EAAE,CAAI,GAAG,CAErD,mBACEjC,KAAA,QAAKiF,SAAS,CAAC,uEAAuE,CAAAC,QAAA,eACpFpF,IAAA,WACEqF,OAAO,CAAE3E,UAAW,CACpByE,SAAS,CAAC,8EAA8E,CAAAC,QAAA,CACzF,QAED,CAAQ,CAAC,cAETpF,IAAA,OAAImF,SAAS,CAAC,uCAAuC,CAAAC,QAAA,CAAC,iBAAY,CAAI,CAAC,cAEvElF,KAAA,MAAGiF,SAAS,CAAC,4BAA4B,CAAAC,QAAA,EAAC,WAAS,CAACnE,iBAAiB,CAAG,CAAC,CAAC,MAAI,CAACN,eAAe,CAACmC,MAAM,EAAI,CAAC,cAG1G9C,IAAA,QAAKmF,SAAS,CAAC,2DAA2D,CAAAC,QAAA,cACxEpF,IAAA,QACEmF,SAAS,CAAC,sEAAsE,CAChFK,KAAK,CAAE,CAAEC,KAAK,IAAAC,MAAA,CAAKH,kBAAkB,KAAI,CAAE,CACvC,CAAC,CACJ,CAAC,CAGLhE,uBAAuB,cACtBrB,KAAA,QAAKiF,SAAS,CAAC,OAAO,CAAAC,QAAA,eACpBpF,IAAA,MAAGmF,SAAS,CAAC,wCAAwC,CAAAC,QAAA,CAAC,wBAAmB,CAAG,CAAC,cAC7ElF,KAAA,MAAGiF,SAAS,CAAC,wBAAwB,CAAAC,QAAA,EAAC,wBAAsB,CAACzD,iBAAiB,CAAC,GAAC,EAAG,CAAC,EACjF,CAAC,CACJF,iBAAiB,cACnBvB,KAAA,QAAKiF,SAAS,CAAC,OAAO,CAAAC,QAAA,eACpBpF,IAAA,MAAGmF,SAAS,CAAC,qDAAqD,CAAAC,QAAA,CAAC,oBAAe,CAAG,CAAC,cACtFlF,KAAA,MAAGiF,SAAS,CAAC,wBAAwB,CAAAC,QAAA,EAAC,iBAAe,CAACrD,kBAAkB,CAAC,MAAI,EAAG,CAAC,EAC9E,CAAC,cAEN;AACA7B,KAAA,CAAAE,SAAA,EAAAgF,QAAA,eACElF,KAAA,QAAKiF,SAAS,CAAC,8CAA8C,CAAAC,QAAA,EAAC,IAC3D,CAACN,cAAc,SAAdA,cAAc,iBAAdA,cAAc,CAAEnB,QAAQ,CAAC,IAC7B,EAAK,CAAC,cAENzD,KAAA,QAAKiF,SAAS,CAAC,oCAAoC,CAAAC,QAAA,eACjDpF,IAAA,WACEqF,OAAO,CAAEL,aAAc,CACvBG,SAAS,CAAC,2GAA2G,CAAAC,QAAA,CACtH,iBAED,CAAQ,CAAC,cACTpF,IAAA,WACEqF,OAAO,CAAER,cAAe,CACxBM,SAAS,CAAC,yGAAyG,CAAAC,QAAA,CACpH,OAED,CAAQ,CAAC,cACTpF,IAAA,WACEqF,OAAO,CAAEJ,iBAAkB,CAC3BE,SAAS,CAAC,yGAAyG,CAAAC,QAAA,CACpH,MAED,CAAQ,CAAC,EACN,CAAC,EACN,CACH,CAGA/D,aAAa,eACZrB,IAAA,QACEmF,SAAS,CAAC,4EAA4E,CACtFE,OAAO,CAAEZ,sBAAwB;AAAA,CAAAW,QAAA,cAEjClF,KAAA,QACEiF,SAAS,CAAC,+CAA+C,CACzDE,OAAO,CAAGM,CAAC,EAAKA,CAAC,CAACC,eAAe,CAAC,CAAE,CAAAR,QAAA,eAEpCpF,IAAA,OAAImF,SAAS,CAAC,uCAAuC,CAAAC,QAAA,CAAC,QAAM,CAAI,CAAC,cACjElF,KAAA,MAAGiF,SAAS,CAAC,4CAA4C,CAAAC,QAAA,EAAC,IAAC,CAACE,YAAY,CAAC,IAAC,EAAG,CAAC,cAC9EpF,KAAA,MAAGiF,SAAS,CAAC,uBAAuB,CAAAC,QAAA,EAAC,cAAY,CAACvD,SAAS,CAAC,MAAI,EAAG,CAAC,EACjE,CAAC,CACH,CACN,EACE,CAAC,CAEV,CAEA,cAAe,CAAAxB,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}