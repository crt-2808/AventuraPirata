{"ast":null,"code":"var _jsxFileName = \"D:\\\\Proyectos Code\\\\project\\\\src\\\\components\\\\PictionaryGame.js\",\n  _s = $RefreshSig$();\n// src/components/PictionaryGame.js\n\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction PictionaryGame({\n  players,\n  allowedDifficulties,\n  onExitGame\n}) {\n  _s();\n  var _currentElement$pista;\n  const [initialGameData, setInitialGameData] = useState([]);\n  const [activeGameQueue, setActiveGameQueue] = useState([]);\n  const [currentQueueIndex, setCurrentQueueIndex] = useState(0);\n  const [elementsCompleted, setElementsCompleted] = useState(0);\n  const [currentPistaIndex, setCurrentPistaIndex] = useState(0);\n  const [showHintPopup, setShowHintPopup] = useState(false);\n  const [showChangePlayerMessage, setShowChangePlayerMessage] = useState(false);\n  const [showFailedMessage, setShowFailedMessage] = useState(false);\n  const [changePlayerTimer, setChangePlayerTimer] = useState(0);\n  const [hintTimer, setHintTimer] = useState(0);\n  const [failedMessageTimer, setFailedMessageTimer] = useState(0);\n  const [isGameActive, setIsGameActive] = useState(false);\n  const [guessTimeLeft, setGuessTimeLeft] = useState(45);\n  const changePlayerTimerRef = useRef(null);\n  const hintTimerRef = useRef(null);\n  const guessTimerRef = useRef(null);\n  const failedMessageTimerRef = useRef(null);\n\n  // startGuessTimer ahora solo se usa para INICIAR un nuevo turno, no para reanudar\n  const startGuessTimer = useCallback(() => {\n    clearInterval(guessTimerRef.current);\n    setGuessTimeLeft(45);\n    setIsGameActive(true);\n    setShowFailedMessage(false);\n  }, []);\n  const handleNextElementLogic = useCallback(() => {\n    clearInterval(guessTimerRef.current);\n    const nextQueueIndex = currentQueueIndex + 1;\n    if (activeGameQueue.length > 0 && nextQueueIndex < activeGameQueue.length) {\n      setCurrentQueueIndex(nextQueueIndex);\n      setCurrentPistaIndex(0);\n      setElementsCompleted(prev => prev + 1);\n      startGuessTimer(); // Inicia el temporizador para el NUEVO elemento\n      setIsGameActive(true);\n    } else if (activeGameQueue.length > 0 && nextQueueIndex >= activeGameQueue.length && initialGameData.length > 0) {\n      setCurrentQueueIndex(0);\n      setCurrentPistaIndex(0);\n      setElementsCompleted(prev => prev + 1);\n      startGuessTimer(); // Inicia el temporizador para el NUEVO elemento (rotado)\n      setIsGameActive(true);\n    } else {\n      console.log(\"¡Juego de Pictionary Terminado!\");\n      setIsGameActive(false);\n      clearInterval(guessTimerRef.current);\n      if (onExitGame) {\n        onExitGame();\n      }\n    }\n  }, [currentQueueIndex, activeGameQueue, initialGameData.length, onExitGame, startGuessTimer]);\n\n  // Carga y mezcla los datos del juego al inicio\n  useEffect(() => {\n    const pictionaryData = require('../mock/pictionary_data.json');\n    const filteredData = pictionaryData.filter(item => item.Dificultad && allowedDifficulties.includes(item.Dificultad));\n    const mappedData = filteredData.map(item => ({\n      elemento: item.Elemento,\n      pistas: item.Pistas_Pictionary,\n      dificultad: item.Dificultad\n    }));\n    const selectedElements = [];\n    if (mappedData.length > 0) {\n      const shuffledData = [...mappedData].sort(() => 0.5 - Math.random());\n      for (let i = 0; i < 5 && i < shuffledData.length; i++) {\n        selectedElements.push(shuffledData[i]);\n      }\n    }\n    setInitialGameData(selectedElements);\n    setActiveGameQueue([...selectedElements]);\n    setCurrentQueueIndex(0);\n    setElementsCompleted(0);\n    setCurrentPistaIndex(0);\n    setIsGameActive(true);\n    setShowHintPopup(false);\n    setShowChangePlayerMessage(false);\n    setShowFailedMessage(false);\n    setChangePlayerTimer(0);\n    setHintTimer(0);\n    setFailedMessageTimer(0);\n    startGuessTimer(); // Inicia el temporizador al cargar el juego por primera vez\n\n    return () => {\n      clearInterval(changePlayerTimerRef.current);\n      clearInterval(hintTimerRef.current);\n      clearInterval(guessTimerRef.current);\n      clearInterval(failedMessageTimerRef.current);\n    };\n  }, [allowedDifficulties, startGuessTimer]);\n\n  // --- Lógica del Pop-up de Pistas ---\n  useEffect(() => {\n    if (showHintPopup && hintTimer > 0) {\n      hintTimerRef.current = setInterval(() => {\n        setHintTimer(prevTime => prevTime - 1);\n      }, 1000);\n    } else if (hintTimer === 0 && showHintPopup) {\n      // Cuando el temporizador de pista se agota, simplemente cierra el pop-up\n      // El temporizador principal de adivinanza se reanudará solo porque showHintPopup será false\n      closeHintPopupInternal();\n    }\n    return () => clearInterval(hintTimerRef.current);\n  }, [showHintPopup, hintTimer]); // Dependencias: solo estos dos estados\n\n  // --- Lógica del Temporizador de Cambio de Jugador ---\n  useEffect(() => {\n    if (showChangePlayerMessage && changePlayerTimer > 0) {\n      changePlayerTimerRef.current = setInterval(() => {\n        setChangePlayerTimer(prevTime => prevTime - 1);\n      }, 1000);\n    } else if (changePlayerTimer === 0 && showChangePlayerMessage) {\n      clearInterval(changePlayerTimerRef.current);\n      setShowChangePlayerMessage(false);\n      handleNextElementLogic();\n    }\n    return () => clearInterval(changePlayerTimerRef.current);\n  }, [showChangePlayerMessage, changePlayerTimer, handleNextElementLogic]);\n\n  // --- Lógica del Temporizador para \"No Adivinaste\" ---\n  useEffect(() => {\n    if (showFailedMessage && failedMessageTimer > 0) {\n      failedMessageTimerRef.current = setInterval(() => {\n        setFailedMessageTimer(prevTime => prevTime - 1);\n      }, 1000);\n    } else if (failedMessageTimer === 0 && showFailedMessage) {\n      clearInterval(failedMessageTimerRef.current);\n      setShowFailedMessage(false);\n      setShowChangePlayerMessage(true);\n      setChangePlayerTimer(7);\n    }\n    return () => clearInterval(failedMessageTimerRef.current);\n  }, [showFailedMessage, failedMessageTimer]);\n\n  // --- Lógica del Temporizador Principal de Adivinanza (45 segundos) ---\n  useEffect(() => {\n    // El temporizador principal solo corre si el juego está activo\n    // Y NO hay ningún pop-up o mensaje modal visible (pista, cambio de jugador, no adivinaste)\n    if (isGameActive && guessTimeLeft > 0 && !showHintPopup && !showChangePlayerMessage && !showFailedMessage) {\n      guessTimerRef.current = setInterval(() => {\n        setGuessTimeLeft(prevTime => prevTime - 1);\n      }, 1000);\n    } else {\n      // Si alguna condición no se cumple (se pausó o el tiempo llegó a 0)\n      clearInterval(guessTimerRef.current); // Detiene el temporizador\n      if (guessTimeLeft === 0 && isGameActive) {\n        // Si el tiempo llegó a 0 y el juego estaba activo\n        console.log(\"¡Tiempo agotado para adivinar!\");\n        setIsGameActive(false);\n        setShowFailedMessage(true);\n        setFailedMessageTimer(3);\n        setActiveGameQueue(prevQueue => prevQueue.filter((_, idx) => idx !== currentQueueIndex));\n        setCurrentQueueIndex(0);\n      }\n    }\n    return () => clearInterval(guessTimerRef.current);\n  }, [guessTimeLeft, isGameActive, showHintPopup, showChangePlayerMessage, showFailedMessage, currentQueueIndex]);\n  const handleShowHint = () => {\n    const currentElement = activeGameQueue[currentQueueIndex];\n    if (currentElement && currentElement.pistas) {\n      clearInterval(guessTimerRef.current); // Pausa el temporizador de adivinanza\n\n      const nextPistaIndex = (currentPistaIndex + 1) % currentElement.pistas.length;\n      setCurrentPistaIndex(nextPistaIndex);\n      setShowHintPopup(true);\n      setHintTimer(3); // Inicia el temporizador para el pop-up de pista\n    }\n  };\n\n  // Función interna para cerrar el pop-up de pistas, SIN reiniciar el temporizador de adivinanza\n  const closeHintPopupInternal = useCallback(() => {\n    clearInterval(hintTimerRef.current); // Limpia el temporizador del pop-up de pista\n    setShowHintPopup(false); // Oculta el pop-up\n    // No se llama a startGuessTimer() aquí; el useEffect principal de guessTimeLeft\n    // se reanudará solo porque showHintPopup ahora es false.\n  }, []); // Sin dependencias que cambien frecuentemente, para que sea estable\n\n  const handleAdivine = () => {\n    clearInterval(guessTimerRef.current);\n    setIsGameActive(false);\n    setShowChangePlayerMessage(true);\n    setChangePlayerTimer(7);\n    setActiveGameQueue(prevQueue => prevQueue.filter((_, idx) => idx !== currentQueueIndex));\n    setCurrentQueueIndex(0);\n  };\n  const handlePassElement = () => {\n    clearInterval(guessTimerRef.current);\n    setIsGameActive(false);\n    const currentElement = activeGameQueue[currentQueueIndex];\n    if (currentElement) {\n      setActiveGameQueue(prevQueue => {\n        const updatedQueue = prevQueue.filter((_, idx) => idx !== currentQueueIndex);\n        updatedQueue.push(currentElement);\n        return updatedQueue;\n      });\n      setCurrentQueueIndex(0);\n    }\n    setCurrentPistaIndex(0);\n    startGuessTimer(); // Este SÍ debe reiniciar el tiempo porque es un \"nuevo intento\" de objeto\n  };\n  if (initialGameData.length === 0 && !isGameActive) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-md mx-auto mt-8 bg-white p-6 rounded-lg shadow-md text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-bold mb-4 text-gray-800\",\n        children: \"Cargando juego Pictionary...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-600\",\n        children: \"Aseg\\xFArate de que hay datos de Pictionary para las dificultades seleccionadas.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onExitGame,\n        className: \"mt-4 bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded\",\n        children: \"Salir del Juego\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this);\n  }\n  if (activeGameQueue.length === 0 && elementsCompleted === initialGameData.length && initialGameData.length > 0 && !isGameActive && !showChangePlayerMessage && !showFailedMessage) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-md mx-auto mt-8 bg-white p-6 rounded-lg shadow-md text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-bold mb-4 text-gray-800\",\n        children: \"\\xA1Juego de Pictionary Terminado!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-600\",\n        children: \"Gracias por jugar. \\xA1Vuelve pronto!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onExitGame,\n        className: \"mt-4 bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded\",\n        children: \"Volver al Selector de Juego\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this);\n  }\n  const currentElement = activeGameQueue[currentQueueIndex];\n  const currentPista = currentElement === null || currentElement === void 0 ? void 0 : (_currentElement$pista = currentElement.pistas) === null || _currentElement$pista === void 0 ? void 0 : _currentElement$pista[currentPistaIndex];\n  const progressPercentage = guessTimeLeft / 45 * 100;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container bg-white p-6 rounded-lg shadow-md text-center relative\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onExitGame,\n      className: \"absolute top-4 left-4 bg-gray-200 hover:bg-gray-300 p-2 rounded-full text-xl\",\n      children: \"\\u2190\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4 text-gray-800\",\n      children: \"\\xA1Pictionary!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-lg text-gray-700 mb-4\",\n      children: [\"Elemento \", elementsCompleted + 1, \" de \", initialGameData.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full bg-gray-200 rounded-full h-4 dark:bg-gray-700 mb-6\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-red-500 h-4 rounded-full transition-all duration-1000 ease-linear\",\n        style: {\n          width: `${progressPercentage}%`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 7\n    }, this), showChangePlayerMessage ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"my-10\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-green-600 text-5xl font-bold mb-4\",\n        children: \"\\xA1Cambia de Jugador!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-700 text-3xl\",\n        children: [\"Siguiente elemento en \", changePlayerTimer, \"s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 9\n    }, this) : showFailedMessage ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"my-10\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-red-600 text-5xl font-bold mb-4 animate-bounce\",\n        children: \"\\xA1No Adivinaste!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-700 text-3xl\",\n        children: [\"Continuando en \", failedMessageTimer, \"s...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 9\n    }, this) :\n    /*#__PURE__*/\n    // --- Muestra el Elemento principal del juego ---\n    _jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-5xl font-extrabold text-purple-700 my-8\",\n        children: [\"\\\"\", currentElement === null || currentElement === void 0 ? void 0 : currentElement.elemento, \"\\\"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-center space-x-4 mt-8\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleAdivine,\n          className: \"bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-lg text-lg transition duration-300\",\n          children: \"\\xA1Adivin\\xE9!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleShowHint,\n          className: \"bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg text-lg transition duration-300\",\n          children: \"Pista\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handlePassElement,\n          className: \"bg-gray-500 hover:bg-gray-600 text-white font-bold py-3 px-6 rounded-lg text-lg transition duration-300\",\n          children: \"Paso\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), showHintPopup && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\",\n      onClick: closeHintPopupInternal // Usa la función interna para cerrar\n      ,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-8 rounded-lg shadow-xl text-center\",\n        onClick: e => e.stopPropagation(),\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-3xl font-bold text-gray-800 mb-4\",\n          children: \"Pista:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-blue-600 text-4xl font-extrabold mb-6\",\n          children: [\"\\\"\", currentPista, \"\\\"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-500 text-lg\",\n          children: [\"Cerrando en \", hintTimer, \"s...\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 258,\n    columnNumber: 5\n  }, this);\n}\n_s(PictionaryGame, \"/qtAB8n9UyOzBV+cQjDqXZUodzY=\");\n_c = PictionaryGame;\nexport default PictionaryGame;\nvar _c;\n$RefreshReg$(_c, \"PictionaryGame\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","jsxDEV","_jsxDEV","Fragment","_Fragment","PictionaryGame","players","allowedDifficulties","onExitGame","_s","_currentElement$pista","initialGameData","setInitialGameData","activeGameQueue","setActiveGameQueue","currentQueueIndex","setCurrentQueueIndex","elementsCompleted","setElementsCompleted","currentPistaIndex","setCurrentPistaIndex","showHintPopup","setShowHintPopup","showChangePlayerMessage","setShowChangePlayerMessage","showFailedMessage","setShowFailedMessage","changePlayerTimer","setChangePlayerTimer","hintTimer","setHintTimer","failedMessageTimer","setFailedMessageTimer","isGameActive","setIsGameActive","guessTimeLeft","setGuessTimeLeft","changePlayerTimerRef","hintTimerRef","guessTimerRef","failedMessageTimerRef","startGuessTimer","clearInterval","current","handleNextElementLogic","nextQueueIndex","length","prev","console","log","pictionaryData","require","filteredData","filter","item","Dificultad","includes","mappedData","map","elemento","Elemento","pistas","Pistas_Pictionary","dificultad","selectedElements","shuffledData","sort","Math","random","i","push","setInterval","prevTime","closeHintPopupInternal","prevQueue","_","idx","handleShowHint","currentElement","nextPistaIndex","handleAdivine","handlePassElement","updatedQueue","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","currentPista","progressPercentage","style","width","e","stopPropagation","_c","$RefreshReg$"],"sources":["D:/Proyectos Code/project/src/components/PictionaryGame.js"],"sourcesContent":["// src/components/PictionaryGame.js\r\n\r\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\r\n\r\nfunction PictionaryGame({ players, allowedDifficulties, onExitGame }) {\r\n  const [initialGameData, setInitialGameData] = useState([]);\r\n  const [activeGameQueue, setActiveGameQueue] = useState([]);\r\n  const [currentQueueIndex, setCurrentQueueIndex] = useState(0);\r\n  const [elementsCompleted, setElementsCompleted] = useState(0);\r\n\r\n  const [currentPistaIndex, setCurrentPistaIndex] = useState(0);\r\n  const [showHintPopup, setShowHintPopup] = useState(false);\r\n  const [showChangePlayerMessage, setShowChangePlayerMessage] = useState(false);\r\n  const [showFailedMessage, setShowFailedMessage] = useState(false); \r\n  const [changePlayerTimer, setChangePlayerTimer] = useState(0);\r\n  const [hintTimer, setHintTimer] = useState(0);\r\n  const [failedMessageTimer, setFailedMessageTimer] = useState(0);\r\n  const [isGameActive, setIsGameActive] = useState(false);\r\n  const [guessTimeLeft, setGuessTimeLeft] = useState(45);\r\n\r\n  const changePlayerTimerRef = useRef(null);\r\n  const hintTimerRef = useRef(null);\r\n  const guessTimerRef = useRef(null);\r\n  const failedMessageTimerRef = useRef(null);\r\n\r\n\r\n  // startGuessTimer ahora solo se usa para INICIAR un nuevo turno, no para reanudar\r\n  const startGuessTimer = useCallback(() => {\r\n    clearInterval(guessTimerRef.current);\r\n    setGuessTimeLeft(45);\r\n    setIsGameActive(true);\r\n    setShowFailedMessage(false);\r\n  }, []);\r\n\r\n  const handleNextElementLogic = useCallback(() => {\r\n    clearInterval(guessTimerRef.current);\r\n\r\n    const nextQueueIndex = currentQueueIndex + 1;\r\n\r\n    if (activeGameQueue.length > 0 && nextQueueIndex < activeGameQueue.length) {\r\n      setCurrentQueueIndex(nextQueueIndex);\r\n      setCurrentPistaIndex(0);\r\n      setElementsCompleted(prev => prev + 1);\r\n      startGuessTimer(); // Inicia el temporizador para el NUEVO elemento\r\n      setIsGameActive(true);\r\n    } else if (activeGameQueue.length > 0 && nextQueueIndex >= activeGameQueue.length && initialGameData.length > 0) {\r\n        setCurrentQueueIndex(0);\r\n        setCurrentPistaIndex(0);\r\n        setElementsCompleted(prev => prev + 1);\r\n        startGuessTimer(); // Inicia el temporizador para el NUEVO elemento (rotado)\r\n        setIsGameActive(true);\r\n    }\r\n    else {\r\n      console.log(\"¡Juego de Pictionary Terminado!\");\r\n      setIsGameActive(false);\r\n      clearInterval(guessTimerRef.current);\r\n      if (onExitGame) {\r\n        onExitGame();\r\n      }\r\n    }\r\n  }, [currentQueueIndex, activeGameQueue, initialGameData.length, onExitGame, startGuessTimer]);\r\n\r\n\r\n  // Carga y mezcla los datos del juego al inicio\r\n  useEffect(() => {\r\n    const pictionaryData = require('../mock/pictionary_data.json');\r\n\r\n    const filteredData = pictionaryData.filter(item =>\r\n      item.Dificultad && allowedDifficulties.includes(item.Dificultad)\r\n    );\r\n\r\n    const mappedData = filteredData.map(item => ({\r\n      elemento: item.Elemento,\r\n      pistas: item.Pistas_Pictionary,\r\n      dificultad: item.Dificultad\r\n    }));\r\n\r\n    const selectedElements = [];\r\n    if (mappedData.length > 0) {\r\n      const shuffledData = [...mappedData].sort(() => 0.5 - Math.random());\r\n      for (let i = 0; i < 5 && i < shuffledData.length; i++) {\r\n        selectedElements.push(shuffledData[i]);\r\n      }\r\n    }\r\n    setInitialGameData(selectedElements);\r\n    setActiveGameQueue([...selectedElements]);\r\n    setCurrentQueueIndex(0);\r\n    setElementsCompleted(0);\r\n    setCurrentPistaIndex(0);\r\n    setIsGameActive(true);\r\n    setShowHintPopup(false);\r\n    setShowChangePlayerMessage(false);\r\n    setShowFailedMessage(false);\r\n    setChangePlayerTimer(0);\r\n    setHintTimer(0);\r\n    setFailedMessageTimer(0);\r\n    startGuessTimer(); // Inicia el temporizador al cargar el juego por primera vez\r\n\r\n\r\n    return () => {\r\n      clearInterval(changePlayerTimerRef.current);\r\n      clearInterval(hintTimerRef.current);\r\n      clearInterval(guessTimerRef.current);\r\n      clearInterval(failedMessageTimerRef.current);\r\n    };\r\n  }, [allowedDifficulties, startGuessTimer]);\r\n\r\n  // --- Lógica del Pop-up de Pistas ---\r\n  useEffect(() => {\r\n    if (showHintPopup && hintTimer > 0) {\r\n      hintTimerRef.current = setInterval(() => {\r\n        setHintTimer(prevTime => prevTime - 1);\r\n      }, 1000);\r\n    } else if (hintTimer === 0 && showHintPopup) {\r\n      // Cuando el temporizador de pista se agota, simplemente cierra el pop-up\r\n      // El temporizador principal de adivinanza se reanudará solo porque showHintPopup será false\r\n      closeHintPopupInternal(); \r\n    }\r\n    return () => clearInterval(hintTimerRef.current);\r\n  }, [showHintPopup, hintTimer]); // Dependencias: solo estos dos estados\r\n\r\n  // --- Lógica del Temporizador de Cambio de Jugador ---\r\n  useEffect(() => {\r\n    if (showChangePlayerMessage && changePlayerTimer > 0) {\r\n      changePlayerTimerRef.current = setInterval(() => {\r\n        setChangePlayerTimer(prevTime => prevTime - 1);\r\n      }, 1000);\r\n    } else if (changePlayerTimer === 0 && showChangePlayerMessage) {\r\n      clearInterval(changePlayerTimerRef.current);\r\n      setShowChangePlayerMessage(false);\r\n      handleNextElementLogic(); \r\n    }\r\n    return () => clearInterval(changePlayerTimerRef.current);\r\n  }, [showChangePlayerMessage, changePlayerTimer, handleNextElementLogic]);\r\n\r\n  // --- Lógica del Temporizador para \"No Adivinaste\" ---\r\n  useEffect(() => {\r\n    if (showFailedMessage && failedMessageTimer > 0) {\r\n      failedMessageTimerRef.current = setInterval(() => {\r\n        setFailedMessageTimer(prevTime => prevTime - 1);\r\n      }, 1000);\r\n    } else if (failedMessageTimer === 0 && showFailedMessage) {\r\n      clearInterval(failedMessageTimerRef.current);\r\n      setShowFailedMessage(false);\r\n      setShowChangePlayerMessage(true);\r\n      setChangePlayerTimer(7);\r\n    }\r\n    return () => clearInterval(failedMessageTimerRef.current);\r\n  }, [showFailedMessage, failedMessageTimer]);\r\n\r\n\r\n  // --- Lógica del Temporizador Principal de Adivinanza (45 segundos) ---\r\n  useEffect(() => {\r\n    // El temporizador principal solo corre si el juego está activo\r\n    // Y NO hay ningún pop-up o mensaje modal visible (pista, cambio de jugador, no adivinaste)\r\n    if (isGameActive && guessTimeLeft > 0 && !showHintPopup && !showChangePlayerMessage && !showFailedMessage) {\r\n      guessTimerRef.current = setInterval(() => {\r\n        setGuessTimeLeft(prevTime => prevTime - 1);\r\n      }, 1000);\r\n    } else { // Si alguna condición no se cumple (se pausó o el tiempo llegó a 0)\r\n      clearInterval(guessTimerRef.current); // Detiene el temporizador\r\n      if (guessTimeLeft === 0 && isGameActive) { // Si el tiempo llegó a 0 y el juego estaba activo\r\n        console.log(\"¡Tiempo agotado para adivinar!\");\r\n        setIsGameActive(false);\r\n        setShowFailedMessage(true);\r\n        setFailedMessageTimer(3);\r\n\r\n        setActiveGameQueue(prevQueue => prevQueue.filter((_, idx) => idx !== currentQueueIndex));\r\n        setCurrentQueueIndex(0);\r\n      }\r\n    }\r\n    return () => clearInterval(guessTimerRef.current);\r\n  }, [guessTimeLeft, isGameActive, showHintPopup, showChangePlayerMessage, showFailedMessage, currentQueueIndex]);\r\n\r\n\r\n  const handleShowHint = () => {\r\n    const currentElement = activeGameQueue[currentQueueIndex];\r\n    if (currentElement && currentElement.pistas) {\r\n      clearInterval(guessTimerRef.current); // Pausa el temporizador de adivinanza\r\n      \r\n      const nextPistaIndex = (currentPistaIndex + 1) % currentElement.pistas.length;\r\n      setCurrentPistaIndex(nextPistaIndex);\r\n\r\n      setShowHintPopup(true);\r\n      setHintTimer(3); // Inicia el temporizador para el pop-up de pista\r\n    }\r\n  };\r\n\r\n  // Función interna para cerrar el pop-up de pistas, SIN reiniciar el temporizador de adivinanza\r\n  const closeHintPopupInternal = useCallback(() => {\r\n    clearInterval(hintTimerRef.current); // Limpia el temporizador del pop-up de pista\r\n    setShowHintPopup(false); // Oculta el pop-up\r\n    // No se llama a startGuessTimer() aquí; el useEffect principal de guessTimeLeft\r\n    // se reanudará solo porque showHintPopup ahora es false.\r\n  }, []); // Sin dependencias que cambien frecuentemente, para que sea estable\r\n\r\n  const handleAdivine = () => {\r\n    clearInterval(guessTimerRef.current);\r\n    setIsGameActive(false);\r\n    setShowChangePlayerMessage(true);\r\n    setChangePlayerTimer(7);\r\n    \r\n    setActiveGameQueue(prevQueue => prevQueue.filter((_, idx) => idx !== currentQueueIndex));\r\n    setCurrentQueueIndex(0); \r\n  };\r\n\r\n  const handlePassElement = () => {\r\n    clearInterval(guessTimerRef.current);\r\n    setIsGameActive(false); \r\n    \r\n    const currentElement = activeGameQueue[currentQueueIndex];\r\n\r\n    if (currentElement) {\r\n        setActiveGameQueue(prevQueue => {\r\n            const updatedQueue = prevQueue.filter((_, idx) => idx !== currentQueueIndex);\r\n            updatedQueue.push(currentElement);\r\n            return updatedQueue;\r\n        });\r\n        setCurrentQueueIndex(0);\r\n    }\r\n    \r\n    setCurrentPistaIndex(0);\r\n    startGuessTimer(); // Este SÍ debe reiniciar el tiempo porque es un \"nuevo intento\" de objeto\r\n  };\r\n\r\n\r\n  if (initialGameData.length === 0 && !isGameActive) {\r\n    return (\r\n      <div className=\"max-w-md mx-auto mt-8 bg-white p-6 rounded-lg shadow-md text-center\">\r\n        <h2 className=\"text-2xl font-bold mb-4 text-gray-800\">Cargando juego Pictionary...</h2>\r\n        <p className=\"text-gray-600\">Asegúrate de que hay datos de Pictionary para las dificultades seleccionadas.</p>\r\n        <button onClick={onExitGame} className=\"mt-4 bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded\">\r\n          Salir del Juego\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (activeGameQueue.length === 0 && elementsCompleted === initialGameData.length && initialGameData.length > 0 && !isGameActive && !showChangePlayerMessage && !showFailedMessage) {\r\n    return (\r\n      <div className=\"max-w-md mx-auto mt-8 bg-white p-6 rounded-lg shadow-md text-center\">\r\n        <h2 className=\"text-2xl font-bold mb-4 text-gray-800\">¡Juego de Pictionary Terminado!</h2>\r\n        <p className=\"text-gray-600\">Gracias por jugar. ¡Vuelve pronto!</p>\r\n        <button onClick={onExitGame} className=\"mt-4 bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded\">\r\n          Volver al Selector de Juego\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const currentElement = activeGameQueue[currentQueueIndex];\r\n  const currentPista = currentElement?.pistas?.[currentPistaIndex];\r\n\r\n\r\n  const progressPercentage = (guessTimeLeft / 45) * 100;\r\n\r\n  return (\r\n    <div className=\"game-container bg-white p-6 rounded-lg shadow-md text-center relative\">\r\n      <button\r\n        onClick={onExitGame}\r\n        className=\"absolute top-4 left-4 bg-gray-200 hover:bg-gray-300 p-2 rounded-full text-xl\"\r\n      >\r\n        &#8592;\r\n      </button>\r\n\r\n      <h2 className=\"text-2xl font-bold mb-4 text-gray-800\">¡Pictionary!</h2>\r\n\r\n      <p className=\"text-lg text-gray-700 mb-4\">Elemento {elementsCompleted + 1} de {initialGameData.length}</p>\r\n\r\n      {/* Barra de progreso del tiempo de adivinanza */}\r\n      <div className=\"w-full bg-gray-200 rounded-full h-4 dark:bg-gray-700 mb-6\">\r\n        <div\r\n          className=\"bg-red-500 h-4 rounded-full transition-all duration-1000 ease-linear\"\r\n          style={{ width: `${progressPercentage}%` }}\r\n        ></div>\r\n      </div>\r\n\r\n      {/* --- Mensajes de estado (se muestran condicionalmente) --- */}\r\n      {showChangePlayerMessage ? (\r\n        <div className=\"my-10\">\r\n          <p className=\"text-green-600 text-5xl font-bold mb-4\">¡Cambia de Jugador!</p>\r\n          <p className=\"text-gray-700 text-3xl\">Siguiente elemento en {changePlayerTimer}s</p>\r\n        </div>\r\n      ) : showFailedMessage ? (\r\n        <div className=\"my-10\">\r\n          <p className=\"text-red-600 text-5xl font-bold mb-4 animate-bounce\">¡No Adivinaste!</p>\r\n          <p className=\"text-gray-700 text-3xl\">Continuando en {failedMessageTimer}s...</p>\r\n        </div>\r\n      ) : (\r\n        // --- Muestra el Elemento principal del juego ---\r\n        <>\r\n          <div className=\"text-5xl font-extrabold text-purple-700 my-8\">\r\n            \"{currentElement?.elemento}\"\r\n          </div>\r\n\r\n          <div className=\"flex justify-center space-x-4 mt-8\">\r\n            <button\r\n              onClick={handleAdivine}\r\n              className=\"bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-lg text-lg transition duration-300\"\r\n            >\r\n              ¡Adiviné!\r\n            </button>\r\n            <button\r\n              onClick={handleShowHint}\r\n              className=\"bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg text-lg transition duration-300\"\r\n            >\r\n              Pista\r\n            </button>\r\n            <button\r\n              onClick={handlePassElement}\r\n              className=\"bg-gray-500 hover:bg-gray-600 text-white font-bold py-3 px-6 rounded-lg text-lg transition duration-300\"\r\n            >\r\n              Paso\r\n            </button>\r\n          </div>\r\n        </>\r\n      )}\r\n\r\n      {/* --- Pop-up de Pistas --- */}\r\n      {showHintPopup && (\r\n        <div \r\n          className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\"\r\n          onClick={closeHintPopupInternal} // Usa la función interna para cerrar\r\n        >\r\n          <div \r\n            className=\"bg-white p-8 rounded-lg shadow-xl text-center\"\r\n            onClick={(e) => e.stopPropagation()}\r\n          >\r\n            <h3 className=\"text-3xl font-bold text-gray-800 mb-4\">Pista:</h3>\r\n            <p className=\"text-blue-600 text-4xl font-extrabold mb-6\">\"{currentPista}\"</p>\r\n            <p className=\"text-gray-500 text-lg\">Cerrando en {hintTimer}s...</p>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PictionaryGame;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}