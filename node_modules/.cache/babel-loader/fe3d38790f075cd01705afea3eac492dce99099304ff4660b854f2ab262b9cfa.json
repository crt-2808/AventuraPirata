{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ramos\\\\Downloads\\\\project\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport GameSelector from './components/GameSelector';\nimport GameRecommendation from './components/GameRecommendation';\nimport PlayerCounter from './components/PlayerCounter';\nimport PirateHeader from './components/PirateHeader';\nimport './styles.css'; // Asegúrate de que tu CSS se importa aquí\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Aquí mantendremos el estado consolidado de los jugadores\n  // En tu PlayerCounter, asumo que onPlayersSelected recibe { adultPlayers, childPlayers }\n  const [players, setPlayers] = useState(null); // { adultPlayers: N, childPlayers: M }\n  const [gameType, setGameType] = useState(null);\n\n  // Nuevo estado para las dificultades permitidas\n  const [allowedDifficulties, setAllowedDifficulties] = useState([]);\n\n  // useEffect para recalcular las dificultades permitidas cuando cambian los jugadores\n  useEffect(() => {\n    let difficulties = [];\n    if (players) {\n      // Solo si ya se han seleccionado los jugadores\n      const {\n        adultPlayers,\n        childPlayers\n      } = players;\n      if (childPlayers > 0) {\n        // Si hay al menos un niño, la dificultad es fácil y media\n        difficulties = ['facil', 'medio'];\n      } else if (adultPlayers > 0) {\n        // Si solo hay adultos (y al menos uno), la dificultad es media y difícil\n        difficulties = ['medio', 'dificil'];\n      }\n      // Si players existe pero ambos son 0, 'difficulties' seguirá siendo un array vacío,\n      // lo cual es una buena indicación de que no hay jugadores.\n    }\n    setAllowedDifficulties(difficulties);\n    // Mostrar en consola la dificultad permitida\n    console.log(\"Dificultades permitidas en App.js:\", difficulties);\n  }, [players]); // Dependencia: se ejecuta cuando el objeto 'players' cambie\n\n  // Función para manejar el \"volver\" desde el GameSelector al PlayerCounter\n  const handleBackToPlayers = () => {\n    setGameType(null); // Asegura que el gameType se resetee\n    setPlayers(null); // Resetea los jugadores para que PlayerCounter se muestre de nuevo\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-blue-100 p-4\",\n    children: [/*#__PURE__*/_jsxDEV(PirateHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-md mx-auto mt-8\",\n      children: !players ?\n      /*#__PURE__*/\n      // Componente para seleccionar jugadores\n      _jsxDEV(PlayerCounter, {\n        onPlayersSelected: setPlayers\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this) : !gameType ?\n      /*#__PURE__*/\n      // Componente para seleccionar el tipo de juego\n      _jsxDEV(GameSelector, {\n        onGameSelected: setGameType,\n        onBack: handleBackToPlayers // Pasa la función para volver al contador de jugadores\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this) :\n      /*#__PURE__*/\n      // Componente para la recomendación del juego\n      _jsxDEV(GameRecommendation, {\n        gameType: gameType,\n        players: players // Pasa el objeto completo de jugadores\n        ,\n        allowedDifficulties: allowedDifficulties // PASANDO LA NUEVA PROP DE DIFICULTADES\n        ,\n        onBack: () => setGameType(null) // Función para volver a la selección de juego\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"75dkbvg1HiEHHq/DtjnzroyV08Y=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","GameSelector","GameRecommendation","PlayerCounter","PirateHeader","jsxDEV","_jsxDEV","App","_s","players","setPlayers","gameType","setGameType","allowedDifficulties","setAllowedDifficulties","difficulties","adultPlayers","childPlayers","console","log","handleBackToPlayers","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onPlayersSelected","onGameSelected","onBack","_c","$RefreshReg$"],"sources":["C:/Users/ramos/Downloads/project/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport GameSelector from './components/GameSelector';\nimport GameRecommendation from './components/GameRecommendation';\nimport PlayerCounter from './components/PlayerCounter';\nimport PirateHeader from './components/PirateHeader';\nimport './styles.css'; // Asegúrate de que tu CSS se importa aquí\n\nfunction App() {\n  // Aquí mantendremos el estado consolidado de los jugadores\n  // En tu PlayerCounter, asumo que onPlayersSelected recibe { adultPlayers, childPlayers }\n  const [players, setPlayers] = useState(null); // { adultPlayers: N, childPlayers: M }\n  const [gameType, setGameType] = useState(null);\n\n  // Nuevo estado para las dificultades permitidas\n  const [allowedDifficulties, setAllowedDifficulties] = useState([]);\n\n  // useEffect para recalcular las dificultades permitidas cuando cambian los jugadores\n  useEffect(() => {\n    let difficulties = [];\n    if (players) { // Solo si ya se han seleccionado los jugadores\n      const { adultPlayers, childPlayers } = players;\n\n      if (childPlayers > 0) {\n        // Si hay al menos un niño, la dificultad es fácil y media\n        difficulties = ['facil', 'medio'];\n      } else if (adultPlayers > 0) {\n        // Si solo hay adultos (y al menos uno), la dificultad es media y difícil\n        difficulties = ['medio', 'dificil'];\n      }\n      // Si players existe pero ambos son 0, 'difficulties' seguirá siendo un array vacío,\n      // lo cual es una buena indicación de que no hay jugadores.\n    }\n    setAllowedDifficulties(difficulties);\n    // Mostrar en consola la dificultad permitida\n    console.log(\"Dificultades permitidas en App.js:\", difficulties);\n  }, [players]); // Dependencia: se ejecuta cuando el objeto 'players' cambie\n\n  // Función para manejar el \"volver\" desde el GameSelector al PlayerCounter\n  const handleBackToPlayers = () => {\n    setGameType(null); // Asegura que el gameType se resetee\n    setPlayers(null); // Resetea los jugadores para que PlayerCounter se muestre de nuevo\n  };\n\n  return (\n    <div className=\"min-h-screen bg-blue-100 p-4\">\n      <PirateHeader />\n      <div className=\"max-w-md mx-auto mt-8\">\n        {!players ? (\n          // Componente para seleccionar jugadores\n          <PlayerCounter onPlayersSelected={setPlayers} />\n        ) : !gameType ? (\n          // Componente para seleccionar el tipo de juego\n          <GameSelector\n            onGameSelected={setGameType}\n            onBack={handleBackToPlayers} // Pasa la función para volver al contador de jugadores\n          />\n        ) : (\n          // Componente para la recomendación del juego\n          <GameRecommendation\n            gameType={gameType}\n            players={players} // Pasa el objeto completo de jugadores\n            allowedDifficulties={allowedDifficulties} // PASANDO LA NUEVA PROP DE DIFICULTADES\n            onBack={() => setGameType(null)} // Función para volver a la selección de juego\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}